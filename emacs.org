#+TITLE: Emax Config

* init.el

** Startup
   The first file emacs will load

   - Change garbage collection threshold
     - The default is 800 000 bytes
   - Display Emacs load time and gcs
   - Refresh dwm blocks if in daemon mode
   - Inhibit startup Message
   - Custom scratch message (WiP)

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Startup   -------\

     (setq gc-cons-threshold (* 50 1000 1000))

     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))

     (if (daemonp)
	 (add-hook 'emacs-startup-hook
		   (lambda ()
		     (shell-command "pkill -RTMIN+7 dwmblocks"))))

     (setq inhibit-startup-message t)

     (setq quotes
	   '("\"Be yourself; everyone else is already taken. - Oscar Wilde\"  - Gpt3.5"
	     "\"I have not failed. I've just found 10,000 ways that won't work. - Thomas Edison\"  - Gpt3.5"
	     "\"If you want to achieve greatness, stop asking for permission. - Unknown\"  - Gpt3.5"
	     "\"The biggest risk is not taking any risk. In a world that's changing really quickly, the only strategy that is guaranteed to fail is not taking risks. - Mark Zuckerberg\" - Gpt3.5"))

     (defun insert-random-quote ()
       (interactive)
       (let ((index (random (length quotes))))
	 (with-current-buffer "*scratch*"
	   (goto-char (point-max))
	   (insert (concat ";; " (nth index quotes) "\n\n")))))

     (setq initial-scratch-message nil)
     (add-hook 'server-after-make-frame-hook 'insert-random-quote)

   #+end_src


** Native Comp
   Emacs can compile elisp

   - Turn off compiler warnings
   - Set the native comp cache directory

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Native Comp   -------\

     ;; (setq native-comp-async-report-warnings-errors nil)

     (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

   #+end_src


** Package Manager
   Package manger configs

   | Package            | Description                                     |
   |--------------------+-------------------------------------------------|
   | Package            | The Emacs package utility                       |
   | Use-Package        | Macros for cleaner init files                   |
   | Use-Package-Ensure | Ensures all use-packaged packages are installed |

   - Set package repository locations
   - Install use-package if not installed
   - Make sure all packages are installed
   - Initialize use-package on non-linux systems
   - use-package-verbose for annoying messages

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Package Manager   -------\

     (require 'package)

     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			      ("melpa" . "https://melpa.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")
			      ("melpa-stable" . "https://stable.melpa.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (eval-when-compile
     (require 'use-package))

     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
     (setq use-package-always-demand (daemonp))

     (setq use-package-verbose t)

   #+end_src


** General Features
   Features not associated with specific packages

   - Enable buffer auto-revert (auto-update)
     - Disable Auto reverting in Buffer-menu-mode
   - Open Buffer List in same window.
   - Frame defaults to full-screen maximized
   - Restore session on restart
   - Relative line numbers
   - Configure auth-source
   - Quit bind prompts for confirmation in graphical mode

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   General   -------\

     (use-package autorevert
       :init
       (setq global-auto-revert-ignore-modes (list 'Buffer-menu-mode))
       (setq global-auto-revert-non-file-buffers t)
       (global-auto-revert-mode t))

     (add-to-list 'default-frame-alist '(fullscreen . maximized))

     (setq display-buffer-alist
	   (cons
	    '("\\*Buffer List\\*"
	      (display-buffer-same-window))
	    display-buffer-alist))

     (setq auth-sources '("~/Documents/Keys/.authinfo.gpg"))

     (defun mf/get-auth-source-secret (host)
       "Retrieve secret from auth-source for given HOST."
       (let ((secret (car (auth-source-search :host host :max 1))))
	 (when (functionp (plist-get secret :secret))
	   (funcall (plist-get secret :secret)))))

     (when (display-graphic-p)
       (setq confirm-kill-emacs 'y-or-n-p))

     (desktop-save-mode 0)		    ; enable breaks bufferp switching

   #+end_src


** Def Advice
   "Advice" wraps existing functions modifying behavior

   - Remove excess whitespace when joining lines
   - Emacs cut and copy work on entire lines if no active region
   - Delete matching parenthesis with C-backspace
   - 'Block-undo' marcros to save undo space
   - Switch to new windows when created
   - Add point to tag marker ring when calling functions that will move your cursor
   - Unload themes before loading a theme

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   DefAdvice   -------\

     (defadvice kill-line (before kill-line-autoreindent activate)
       "Kill excess whitespace when joining lines.
		  If the next line is joined to the current line, kill the extra indent whitespace in front of the next line."
       (when (and (eolp) (not (bolp)))
	 (save-excursion
	   (forward-char 1)
	   (just-one-space 1))))

     (defadvice kill-ring-save (before slick-copy activate compile)
       "When called interactively with no active region, copy a single line instead."
       (interactive
	(if mark-active (list (region-beginning) (region-end))
	  (message "Single line killed")
	  (list (line-beginning-position)
		(line-beginning-position 2)))))

     (defadvice kill-region (before slick-cut activate compile)
       "When called interactively with no active region, kill a single line instead."
       (interactive
	(if mark-active (list (region-beginning) (region-end))
	  (list (line-beginning-position)
		(line-beginning-position 2)))))

     (defadvice backward-kill-word (around delete-pair activate)
       "Killing open parenthesis with backwards-kill-word kills close patenthesis"
       (if (eq (char-syntax (char-before)) ?\()
	   (progn
	     (backward-char 1)
	     (save-excursion
	       (forward-sexp 1)
	       (delete-char -1))
	     (forward-char 1)
	     (append-next-kill)
	     (kill-backward-chars 1))
	 ad-do-it))

     (defun block-undo (fn &rest args)
       (let ((marker (prepare-change-group)))
	 (unwind-protect (apply fn args)
	   (undo-amalgamate-change-group marker))))

     (dolist (fn '(kmacro-call-macro
		   kmacro-exec-ring-item
		   dot-mode-execute
		   apply-macro-to-region-lines))
       (advice-add fn :around #'block-undo))

     (defun mf/window-follow (&rest _arg)
       "Advice to follow a function which spawn a window."
       (other-window 1))

     (advice-add 'split-window-below :after #'mf/window-follow)
     (advice-add 'split-window-right :after #'mf/window-follow)

     (defun mf/add-point-to-find-tag-marker-ring (&rest r)
       "Handy advising function to push point to the tag marker stack (R ignored)."
       (require 'etags)
       (xref-push-marker-stack))

     (advice-add 'find-function :before 'mf/add-point-to-find-tag-marker-ring)
     (advice-add 'consult-ripgrep :before 'mf/add-point-to-find-tag-marker-ring)
     (advice-add 'consult-line :before 'mf/add-point-to-find-tag-marker-ring)

     (define-advice load-theme (:before (&rest _args) theme-dont-propagate)
       "Discard all themes before loading new."
       (mapc #'disable-theme custom-enabled-themes))

   #+end_src


** Kill-Hook
   Sexps run when emacs is killed

   - Refresh dwmblocks when emacs is killed

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Kill Hooks   -------\

     (if (daemonp)
	 (add-hook 'kill-emacs-hook
		   (lambda ()
		     (shell-command "pkill -RTMIN+7 dwmblocks"))))

   #+end_src


** Load Paths
   Paths of other elsip init files

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Load Paths   -------\

     (setq custom-file (locate-user-emacs-file "mf-custom.el"))
     ;; (load custom-file 'noerror 'nomessage)
     (load custom-file)

     (load (concat user-emacs-directory "mf-packages.el"))
     (load (concat user-emacs-directory "mf-keys.el"))
     (load (concat user-emacs-directory "mf-org.el"))
     (load (concat user-emacs-directory "mf-templates.el"))
     (load (concat user-emacs-directory "mf-gui.el"))
     (load (concat user-emacs-directory "mf-sh.el"))

     (message "------- Loaded init.el -------")

   #+end_src


* packages.el
  Non-gui packages are loaded here(?)
    - balkanize

** Help
   Packages that provide documentation features

   | Package | Description           |
   |---------+-----------------------|
   | Helpful | Better documentation  |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Help   -------\

     (use-package helpful
       :commands (helpful-callable helpful-variable helpful-command helpful-key)
       :bind
       ([remap describe-function] . helpful-function)
       ([remap describe-symbol] . helpful-symbol)
       ([remap describe-variable] . helpful-variable)
       ([remap describe-command] . helpful-command)
       ([remap describe-key] . helpful-key))

   #+end_src


** Completion
   Completion packages

*** Mini-Buffer

    | Package    | Description                                   |
    |------------+-----------------------------------------------|
    | Vertico    | Vertical mini-buffer completion               |
    | SaveHist   | Saves minibuffer history                      |
    | Marginalia | Additional mini-buffer completion information |
    | Orderless  | Orderless and wildcard completion support     |
    | Consult    | Replace I-Search                              |
    | Emacs      | Minibuffer settings                           |

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   Completion   -------\

      (use-package vertico
	:diminish
	:bind (:map vertico-map
		    ("C-f" . vertico-exit))
	:custom
	(vertico-cycle t)
	:init
	(vertico-mode))

      (use-package savehist
	:after vertico
	:config
	(savehist-mode))

      (use-package marginalia
	:after vertico
	:custom
	(marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	:init
	(marginalia-mode))

      (use-package orderless
	:after vertico
	:init
	(setq completion-styles '(orderless)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))

      (use-package consult
	:init
	(defun mf/get-project-root ()
	  (when (fboundp 'projectile-project-root)
	    (projectile-project-root)))
	:demand t
	:bind (("C-s" . consult-line)
	       ("C-M-l" . consult-imenu)
	       ("C-M-j" . persp-switch-to-buffer*)
	       :map minibuffer-local-map
	       ("C-r" . consult-history))
	:custom
	(consult-project-root-function #'mf/get-project-root)
	(completion-in-region-function #'consult-completion-in-region))

      (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; Alternatively try `consult-completing-read-multiple'.
	(defun crm-indicator (args)
	  (cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))

    #+end_src


*** Completion-At-Point

    | Package    | Description                                   |
    |------------+-----------------------------------------------|
    | Corfu      | Completion in region                          |
    | Cape       | Completion functions for Corfu                |

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   Completion at Point   -------\

      (use-package corfu
	:bind (:map corfu-map
		    ("C-n" . corfu-next)
		    ("C-p" . corfu-previous)
		    ("C-d"  . corfu-quit))
	:custom
	(corfu-cycle t)
	(corfu-auto t)
	(corfu-quit-at-boundary t)
	(corfu-quit-no-match t)
	(corfu-auto-delay .1)
	(corfu-auto-prefix 1)
	;:config
	;(corfu-global-mode)
	:hook
	(after-init . global-corfu-mode))

      (use-package cape
	;; Bind dedicated completion commands
	;; Alternative prefix keys: C-c p, M-p, M-+, ...
	:bind (("C-c p p" . completion-at-point) ;; capf
	       ("C-c p t" . complete-tag)        ;; etags
	       ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
	       ("C-c p h" . cape-history)
	       ("C-c p f" . cape-file)
	       ("C-c p k" . cape-keyword)
	       ("C-c p s" . cape-symbol)
	       ("C-c p a" . cape-abbrev)
	       ("C-c p l" . cape-line)
	       ("C-c p w" . cape-dict)
	       ("C-c p \\" . cape-tex)
	       ("C-c p _" . cape-tex)
	       ("C-c p ^" . cape-tex)
	       ("C-c p &" . cape-sgml)
	       ("C-c p r" . cape-rfc1345))
	:init
	;; Add `completion-at-point-functions', used by `completion-at-point'.
	;; NOTE: The order matters!
	(add-to-list 'completion-at-point-functions #'cape-dabbrev)
	(add-to-list 'completion-at-point-functions #'cape-file)
	(add-to-list 'completion-at-point-functions #'cape-elisp-block)
	;;(add-to-list 'completion-at-point-functions #'cape-history)
	;;(add-to-list 'completion-at-point-functions #'cape-keyword)
	;;(add-to-list 'completion-at-point-functions #'cape-tex)
	;;(add-to-list 'completion-at-point-functions #'cape-sgml)
	;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
	;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
	;;(add-to-list 'completion-at-point-functions #'cape-dict)
	;;(add-to-list 'completion-at-point-functions #'cape-symbol)
	;;(add-to-list 'completion-at-point-functions #'cape-line)
      )

    #+end_src


*** AI

    | Package | Description                |
    |---------+----------------------------|
    | gptel   | No-frills emacs gpt client |

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   AI   -------\

      (use-package gptel
	:defer t
	:init
	(setq gptel-default-mode 'org-mode)
	:config
	(setq  gptel-api-key (gptel-api-key-from-auth-source)))

    #+end_src


*** Spelling

    | Package    | Description         |
    |------------+---------------------|
    | flyspell   | Spell checking mode |
    | whitespace | Show whitespace     |

    - Set $DICPATH to "$HOME/Documents/Dictionaries" for hunspell.
    - Tell ispell-mode to use hunspell.

     #+begin_src emacs-lisp :tangle ./mf-packages.el

       (setenv
	"DICPATH"
	(concat (getenv "HOME") "/Documents/Dictionaries"))

       (setq ispell-program-name "/usr/bin/hunspell")

       (use-package flyspell
	 :hook ((org-mode . flyspell-mode)
		(text-mode . flyspell-mode)
		(prog-mode . flyspell-prog-mode))
       :bind ("C-c f" . flyspell-mode))

       (use-package whitespace
       :bind ("C-c w" . whitespace-mode))

     #+end_src


*** LSP

    | Package      | Description                    |
    |--------------+--------------------------------|
    | eglot        | Lsp backend                    |
    | web-mode     | Show whitespace                |
    | skewer-mode  |                                |
    | python-mode  | Major mode for editing python  |
    | haskell-mode | Major mode for editing haskell |
    | racket-mode  | Major mode for editing racket  |

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   LSP   -------\

      (use-package eglot
	:init
	(setq eglot-project-root-files '(".projectile" ".git" ".svn" ".hg" ".project"))
	(setq eglot-ignored-server-capabilites '(:documentHighlightProvider))
	(setq eglot-stay-out-of '(company capf flymake))
	:hook
	((c-mode c++mode obj-mode cuda-mode js-mode web-mode) . eglot-ensure)
	:config
	(add-to-list 'eglot-server-programs '((c++mode c-mode) "clangd")))

      (use-package web-mode
	:mode "\\.html?\\'"
	;; :mode "\\\\.(html?\\|ejs\\|tsx\\|jsx\\)\\'"
	:config
	(setq-default web-mode-code-indent-offset 2)
	(setq-default web-mode-markup-indent-offset 2)
	(setq-default web-mode-attribute-indent-offset 2))

      ;; 1. Start the server with `httpd-start'
      ;; 2. Use `impatient-mode' on any buffer
      (use-package impatient-mode
	;;:mode "\\.html?\\'")
	:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

      (use-package skewer-mode
	;;:mode "\\.html?\\'")
	:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

      (use-package python-mode
	:hook (python-mode . eglot-ensure)
	:custom
	;; NOTE: Set these if Python 3 is called "python3" on your system!
	(python-shell-interpreter "python3")
	(dap-python-executable "python3"))

      (use-package haskell-mode
	:defer t)

      (use-package racket-mode
	:defer t)

    #+end_src


** REPL

   | Package | Description |
   |---------+-------------|
   | slime   | Lisp REPL   |

   #+begin_src emacs-lisp :tangle ./mf-packages.el

     (use-package slime
       :defer t
       :config
       (setq inferior-lisp-program "sbcl")
       (add-to-list 'load-path "/usr/share/emacs/site-lisp/slime/")
       (slime-setup '(slime-fancy)))

   #+end_src


** Version Control

   | Package    | Description                 |
   |------------+-----------------------------|
   | Projectile | Project interaction library |
   | vc         | Built in version control    |
   | Magit      | Git porcilain               |
   | Forge      | Additional git features     |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Version Control   -------\

     (use-package vc
       :custom
       (vc-follow-symlinks t))

     (use-package projectile
       :diminish projectile-mode
       :init
       (when (file-directory-p "~/Code")
	 (setq projectile-project-search-path '("~/Code")))
       (setq projectile-switch-project-action #'projectile-dired)
       :bind-keymap
       ("C-c P" . projectile-command-map)
       :config
       (add-to-list 'project-find-functions #'(lambda (dir) (directory-files dir nil "\\.c\\'")))
       (projectile-mode))
       ;;:custom ((projectile-completion-system 'vertico))

     (use-package magit
       :commands magit-status)
     ;; :Custom                             ; opens diff in current buffer
     ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

     ;; uninstall after emacs 29.1
     (use-package sqlite3
       :after magit)

     (use-package forge
       :after magit)

   #+end_src


** Terminals

   | Package | Description       |
   |---------+-------------------|
   | vterm   | Terminal emulator |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Terminals   -------\

     (use-package vterm
       :commands vterm
       :config
       (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
       ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
       (setq vterm-max-scrollback 10000))

   #+end_src


** Remote Access

   | Package | Description                                 |
   |---------+---------------------------------------------|
   | tramp   | Transparent Remote Access Multiple Protocol |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Tramp   -------\

     (use-package tramp
       :defer t
       :config
       (setq tramp-default-method "ssh"))

   #+end_src


** ERC

   | Package      | Description              |
   |--------------+--------------------------|
   | erc          | Emacs client for IRC     |
   | erc-hl-nicks | Hilight nicknames in erc |
   | erc-image    | Display images in erc    |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   ERC   -------\

     (when (display-graphic-p)
       (use-package erc
	 :defer t
	 :init
	 (setq erc-server "irc.libera.chat"
	       ;; erc-nick ""
	       ;; erc-user-full-name ""

	       erc-track-shorten-start 8	; Length of channel notifcation in mode-line
	       ;; erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
	       erc-kill-buffer-on-part t
	       erc-auto-query 'bury		; No auto-focus buffer when mentioned	
	       erc-fill-column 79		; Defualt
	       erc-fill-function 'erc-fill-static
	       erc-fill-static-center 20
	       erc-track-exclude-types '("JOIN" "NICK" "QUIT" "MODE" "AWAY")
	       erc-track-visibility nil)   ; Only use the selected frame to consider notification seen
	 :config
	 (add-to-list 'erc-modules 'notifications)
	 (add-to-list 'erc-modules 'spelling)
	 (erc-services-mode 1)
	 (erc-update-modules))

					     ;-------   ERC Packages   -------\

       (use-package erc-hl-nicks
	 :after erc
	 :config
	 (add-to-list 'erc-modules 'hl-nicks))

       (use-package erc-image
	 :after erc
	 :config
	 (setq erc-image-inline-rescale 300)
	 (add-to-list 'erc-modules 'image)))

   #+end_src


** Bookmarks

   | Package | Description                |
   |---------+----------------------------|
   | buku    | Org mode browser bookmarks |

   #+begin_src emacs-lisp :tangle ./mf-packages.el

     (use-package ebuku
       :defer t
       :config
       (setq ebuku-buku-path "/usr/bin/buku"))

   #+end_src


** File Types

   | Package   | Descrition              |
   |-----------+-------------------------|
   | Pdf-Tools | Pdf support             |

    - Load arduino files (.ino) in c-mode

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					    ;-------   File Types   -------\

     (use-package pdf-tools
       :defer t
       ;:pin manual ;; manually update *****breaks first install*****
       :mode ("\\.pdf\\'" . pdf-view-mode)
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page)
       (setq pdf-annot-activate-created-annotations t)
       (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

     (add-to-list 'auto-mode-alist
		  '("\\.ino\\'" . (lambda ()
				    (c-mode))))

     (message "------- Loaded packages.el -------")

   #+end_src


* keys.el

** Key Packages

   | Package         | Description                                                       |
   |-----------------+-------------------------------------------------------------------|
   | Evil            | Vim Layers                                                        |
   | Evil Collection | Additional mode support for Evil                                  |
   | General         | Leader keys                                                       |
   | Which-Key       | Displays available next keystrokes for keybinds after 1.5 seconds |
   | Hydra           | Prefix bindings                                                   |

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Key Packages   -------\

     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       (setq evil-respect-visual-line-mode t)
       (setq evil-mode-line-format '(before . mode-line-front-space))
       (setq evil-disable-insert-state-bindings t)
       (setq evil-want-fine-undo t)
       ;; (setq evil-undo-system 'undo-tree)
       :config
       (evil-mode 1)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
       ;; Use visual line motions even outside of visual-line-mode buffers
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))

     (use-package evil-collection
       :after evil
       :diminish evil-collection-unimpaired-mode
       :config
       (evil-collection-init))

     (use-package general
       :after evil
       :config
       (general-create-definer mf/general-keys
	 :keymaps '(normal insert visual emacs)
	 :prefix "SPC"
	 :global-prefix "M-SPC"))

     (use-package which-key
       :diminish which-key-mode
       :config
       (which-key-mode)
       (setq which-key-idle-delay .33))

     (use-package hydra
       :defer t)

   #+end_src


** Binds

   - Complain about arrow keys
   - Vim binds for dired
   - Open 'Recent Files' buffer
   - Keybind for minibuffer

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Key Binds   -------\
     (defun dw/dont-arrow-me-bro ()
	 (interactive)
	 (message "Arrow keys are bad, you know?"))

     ;; Disable arrow keys in normal and visual modes
     (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

     (evil-collection-define-key 'normal 'dired-mode-map
       "h" 'dired-single-up-directory
       "H" 'dired-omit-mode
       "l" 'dired-single-buffer
       "y" 'dired-ranger-copy
       "X" 'dired-ranger-move
       "p" 'dired-ranger-paste)

     (add-hook 'special-mode-hook
	       (lambda ()
		 (define-key evil-normal-state-local-map
		   (kbd "q") 'kill-buffer-and-window)))

     (recentf-mode 1)
     (global-set-key (kbd "C-x M-f") 'recentf-open-files)

     (global-set-key (kbd "C-c b") 'switch-to-minibuffer)

   #+end_src


** Which and General Keys

   | Function            | Description                     |
   |---------------------+---------------------------------|
   | mf/general-keys     | Define leading keys in keybinds |
   | hydra-text-scale    | Scale text with j and k         |
   | hydra-find-file     |                                 |
   | hydra-find-config   |                                 |
   | hydra-find-dir      |                                 |
   | hydra-switch-buffer |                                 |
   | hydra-switch-window |                                 |

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Which and Leader Keys   -------\

     (mf/general-keys
       "t" '(:ignore t :which-key "toggles")
       "ts" '(hydra-text-scale/body :which-key "scale text")
       "tl" '(display-line-numbers-mode :which-key "line-numbers")
       "tP" '(visual-fill-column-mode :which-key "padding")
       "tp" '(mf/toggle-visual-fill-column-width :which-key "vc-width")

       "f" '(:ignore t :which-key "find")
       "ff" '(hydra-find-file/body :which-key "find file")
       "fc" '(hydra-find-config/body :which-key "find conf.")
       "fd" '(hydra-find-dir/body :which-key "find dir.")

       "x" '(:ignore t :which-key "eval")
       "xe" '(hydra-eval-emacs/body :which-key "emacs")

       "b" '(hydra-switch-buffer/body :which-key "switch buffer")
       "w" '(hydra-switch-window/body :which-key "switch window")

       "v" '(vterm :which-key "vterm")
       "g" '(gptel :which-key "gptel")
       "m" '(mf/switch-to-messages :which-key "*Messages*")
       "s" '(mf/switch-to-scratch :which-key "*scratch*")
       "SPC" '(which-key-show-full-major-mode :which-key "which-key"))

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("<escape>" nil "finished" :exit t))

     (defhydra hydra-find-file (:timeout 4)
       "select file"
       ("e" (find-file (expand-file-name (concat user-emacs-directory "emacs.org")))"emacs.org" :exit t)
       ("t" (find-file (expand-file-name "~/Org/todo.org"))"todo.org" :exit t)
       ("g" (find-file (expand-file-name "~/Org/toget.org"))"toget.org" :exit t)
       ("m" (find-file (expand-file-name "~/Org/tomake.org"))"tomake.org" :exit t)
       ("n" (find-file (expand-file-name "~/Org/notes.org"))"notes.org" :exit t)
       ("r" (find-file (expand-file-name "~/Documents/Recipe_Book/Recipe_Book_2/recipes.org"))"recipes.org" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-find-config (:timeout 4)
       ("t" (find-file (concat custom-theme-directory "/doom-mfspacegrey-theme.el"))"theme" :exit t)
       ("d" (find-file (expand-file-name "~/.config/mf-dwm/config.h"))"dwm" :exit t)
       ("D" (find-file (expand-file-name "~/.config/mf-dwm/config.def.h"))"dwm" :exit t)
       ("x" (find-file (expand-file-name "~/.xinitrc"))".xinitrc" :exit t)
       ("r" (find-file (expand-file-name "~/.Xresources"))".Xresrouces" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-find-dir (:timeout 4)
       "select dir"
       ("e" (dired (expand-file-name user-emacs-directory))"emacs" :exit t)
       ("c" (dired (expand-file-name "~/Code"))"Code" :exit t)
       ("l" (dired (expand-file-name "~/.local/bin"))".local" :exit t)
       ("o" (dired (expand-file-name org-directory))"Org" :exit t)
       ("C" (dired (expand-file-name "~/.config"))"Config" :exit t)
       ("p" (dired (expand-file-name "~/Documents/PDFs"))"PDFs" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-switch-buffer (:timeout 4)
       "switch buffer"
       ("j" (switch-to-next-buffer)"next")
       ("k" (switch-to-prev-buffer)"previous")
       ("n" (lambda ()
	      (interactive)
	      (split-window-right)
	      (windmove-right))"v. split")
       ("N" (lambda ()
	      (interactive)
	      (split-window-below)
	      (windmove-down)) "h. split")
       ("q" (delete-window)"close")
       ("Q" (kill-this-buffer)"kill")
       ("c" (lambda ()
	      (interactive)
	      (delete-window)
	      (kill-this-buffer))"c & k")
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-switch-window (:timeout 4)
       "switch window"
       ("j" (other-window 1)"next")
       ("k" (other-window -1)"previous")
       ("n" (lambda ()
	      (interactive)
	      (split-window-right)
	      (windmove-right))"v. split")
       ("N" (lambda ()
	      (interactive)
	      (split-window-below)
	      (windmove-down)) "h. split")
       ("q" (delete-window)"close")
       ("Q" (kill-this-buffer)"kill")
       ("c" (lambda ()
	      (interactive)
	      (delete-window)
	      (kill-this-buffer))"c & k")
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-eval-emacs (:timeout 4)
       ("i" (load-file user-init-file)"init.el" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defun mf/switch-to-scratch ()
       (interactive)
       (switch-to-buffer "*scratch*"))

     (defun mf/switch-to-messages ()
       (interactive)
       (switch-to-buffer "*Messages*"))


     (message "------- Loaded keys.el -------")

    #+end_src


* org.el

** Org Packages

   | Package                   | Description                                   |
   |---------------------------+-----------------------------------------------|
   | mf/org-babel-tangle-conig | Aftersave hook to babel tangle to init files  |
   | mf/org-mode-setup         | Diminish indent mode, and add indent features |
   | org                       | org-mode                                      |
   | org-bullets               | Hide all but one header asterisk and stylize  |
   | org-roam                  | Zettlekasten for org-mode                     |
   | org-roam-ui               | Visualizer for org-roam                       |

    #+begin_src emacs-lisp :tangle ./mf-org.el
					      ;-------   Packages   -------\

      (use-package org
	:pin org
	:init
	(setq org-todo-keywords
	      '((type "TODO(t)" "HOLD(h)" "NEXT(n)" "|" "DONE(d!)")))

	(setq org-refile-targets
	      '(("Archive.org" :maxlevel . 1)
		("Tasks.org" :maxlevel . 1)))

	;; Save Org buffers after refiling!
	(advice-add 'org-refile :after 'org-save-all-org-buffers)

	(defun mf/org-mode-setup ()
	  (diminish 'org-indent-mode)
	  ;;  (variable-pitch-mode 1)
	  (setq evil-auto-indent nil
		org-adapt-indentation t))

	(defun mf/org-babel-tangle-config ()
	  (when (string-equal (file-name-directory (buffer-file-name))
			      (expand-file-name user-emacs-directory))
	    (let ((org-confirm-babel-evaluate nil))
	      (org-babel-tangle))))

	(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mf/org-babel-tangle-config)))

	:custom (org-directory "~/Org")
	:commands (org-capture org-agenda)
	:hook (org-mode . mf/org-mode-setup)
	:config (setq org-startup-folded t
		      ;;org-ellipsis " ▾"
		      org-log-agenda-sater-with-log-mode t
		      org-log-done 'time
		      org-log-into-drawer t)
	:bind (("C-c a" . org-agenda)
	       ("C-c l" . org-store-link)
	       ("C-c c" . org-capture)))

      ;;(define-key global-map (kbd "C-c c")
      ;;    (lambda () (interactive) (org-capture nil "jj")))

      (use-package org-bullets
	:hook (org-mode . org-bullets-mode))

      (use-package org-roam
	:init
	;; (defun my/org-roam-find-recipe ()
	;;   "Find Org Roam notes in the recipe directory."
	;;   (interactive)
	;;   (org-roam-find-directory "~/Org/Recipes"))
	:custom
	(org-roam-directory "~/Org/Roam")
	(org-roam-completion-everywhere t)
	(org-roam-capture-templates
	 '(("p" "plain" plain
	    "%?"
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    :unnarrowed t)
	   ("d" "Definition" plain
	    "\n* Definition\n\n  - %?"
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    :empty-lines 1
	    :unnarrowed t)
	   ("D" "Symbols Definition" plain
	    "#+options: ^:{}\n#+startup: entitiespretty\n* nDefinition\n\n  - %?"
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    :unnarrowed t)
	   ("l" "Logic" plain
	    "#+options: ^:{}\n#+startup: entitiespretty\n\n- A %?\n\n- B "
	    :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    :unnarrowed t)))
	:bind (("C-c n l" . org-roam-buffer-toggle)
	       ("C-c n f" . org-roam-node-find)
	       ("C-c n i" . org-roam-node-insert)
	       :map org-mode-map
	       ("M-TAB"    . completion-at-point))
	:config
	(org-roam-setup))

      (use-package org-roam-ui
	:after org-roam
	;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
	;;         a hookable mode anymore, you're advised to pick something yourself
	;;         if you don't care about startup time, use
	;;  :hook (after-init . org-roam-ui-mode)
	:init
	(setq org-roam-ui-sync-theme t
	      org-roam-ui-follow t
	      org-roam-ui-open-on-start nil
	      org-roam-ui-update-on-save t
	      org-roam-ui-open-on-start t))

      (with-eval-after-load 'org
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((emacs-lisp . t)
	   (C . t))))

    #+end_src


** Org Agenda

   | Variable                   | Description                |
   |----------------------------+----------------------------|
   | org-agenda-files           | Set org agenda files       |
   | org-agenda-custom-commands | Add items to agenda prompt |
   | org-tag-alist              | "                          |

   #+begin_src emacs-lisp :tangle ./mf-org.el
					     ;-------   Agenda   -------\

     (setq org-agenda-files
	   '("~/Documents/Org/todo.org"
	     "~/Documents/Org/to_get.org"))


     (setq org-agenda-custom-commands
	   '(("o" "Overview"
	      ((agenda "" ((org-deadline-warning-days 7)))
	       (todo "NEXT"
		     ((org-agenda-overriding-header "Next Tasks")))
	       (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	     ("n" "Next Tasks"
	      ((todo "NEXT"
		     ((org-agenda-overriding-header "Next Tasks")))))


	     ("d" "Computer" tags-todo "computer")

	     ("l" "Learn" tags-todo "learn")

	     ("r" "Write" tags-todo "write")

	     ("w" "Elec Eng" tags-todo "ee")

	     ("p" "Music Production" tags-todo "music")

	     ("W" "Workflow"
	      ((todo "PLAN"
		     ((org-agenda-overriding-header "Plan")
		      (org-agenda-FILES ORG-AGENDA-files)))
	       (todo "DESIGN"
		     ((org-agenda-overriding-header "Design")
		      (org-agenda-files org-agenda-files)))
	       (todo "MAKE"
		     ((org-agenda-overriding-header "Make")
		      (org-agenda-files org-agenda-files)))))))

     (setq org-tag-alist
	   '((:startgroup)
	     ;; Put mutually exclusive tags here
	     (:endgroup)
	     ("computer" . ?d)
	     ("learn" . ?l)
	     ("write" . ?r)
	     ("make" . ?f)
	     ("ee" . ?w)
	     ("music" . ?p)
	     ("idea" . ?i)))


     (message "------- Loaded org.el -------")

   #+end_src


* templates.el

  #+begin_src emacs-lisp :tangle ./mf-templates.el
					    ;-------   Tempo Templates   -------\

    (with-eval-after-load 'org
      ;; This is needed as of Org 9.2
      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("eli" . "src emacs-lisp :tangle ./init.el"))
      (add-to-list 'org-structure-template-alist '("elg" . "src emacs-lisp :tangle ./mf-gui.el"))
      (add-to-list 'org-structure-template-alist '("elk" . "src emacs-lisp :tangle ./mf-keys.el"))
      (add-to-list 'org-structure-template-alist '("elo" . "src emacs-lisp :tangle ./mf-org.el"))
      (add-to-list 'org-structure-template-alist '("elt" . "src emacs-lisp :tangle ./mf-templates.el"))
      (add-to-list 'org-structure-template-alist '("els" . "src emacs-lisp :tangle ./mf-sh.el"))
      (add-to-list 'org-structure-template-alist '("cc" . "src C :exports results"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("b" . "src bash :tangle ./ais_tangled.sh"))
      (tempo-define-template "org-recipe"
			     '( "** "p n n
				"*** Meta:" n n
				"   Dificulty    : " n
				"   Time         : " n
				"   Time Cooking : " n
				"   Servings     : " n
				"   Equipment    : "n n
				"*** Ingredients:"n n
				"    | Ingredient | Amount |" n
				"    |------------+--------|" n
				"    |            |        |" n
				"    |            |        |" n
				"    |            |        |"n n
				"*** Instrucions:"n n
				"    1. "n n
				"*** Notes:"n n
				"    - " n
				)
			     "<r" "Insert org-recipe" 'org-tempo-tags))


					    ;-------   Org Capture Templates   -------\


    (setq org-capture-templates
	  `(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "/Org/todo.org" "Captured")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	    ("j" "Journal Entries")
	    ("jj" "Journal" entry
	     (file+olp+datetree "~/Org/journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     :clock-in :clock-resume
	     :empty-lines 1)))

    (message "------- Loaded templates.el -------")

 #+end_src


* gui.el

** Padding

   | Package               | Description                               |
   |-----------------------+-------------------------------------------|
   | mf/visual-fill-column | Set fill column 'width' and 'center text' |
   | visual-fill-column    | Add vertical padding around the buffer    |

   - Truncate package menu lines

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Padding   -------\

     (use-package visual-fill-column
       :init
       (defun mf/visual-fill-column (width center)
	 "Set visual-fill-column-width and visual-fill-column-center-text."
	 (interactive "nEnter the width: \nCenter text? (t or nil): ")
	 (setq visual-fill-column-width width
	       visual-fill-column-center-text center))

       (defun mf/toggle-visual-fill-column-width ()
	 "Toggle between visual fill column widths 75, 100, 150, and 0."
	 (interactive)
	 (setq visual-fill-column-width
	       (cond ((= visual-fill-column-width 75) 100)
		     ((= visual-fill-column-width 100) 150)
		     ((= visual-fill-column-width 150) 0)
		     (t 75))))

       (add-hook 'package-menu-mode-hook (lambda () (setq truncate-lines t)))
       (add-hook 'package-menu-mode-hook (lambda () (visual-line-mode -1)))

       (mf/visual-fill-column 100 t)
       :hook  ((visual-line-mode . visual-fill-column-mode)
	       (Info-mode . (lambda () (mf/visual-fill-column 75 t)))
	       (minibuffer-setup . (lambda () (mf/visual-fill-column 150 t)))
	       (package-menu-mode . (lambda () (mf/visual-fill-column 150 t))))
       :config
       (global-visual-fill-column-mode t))

     (setq scroll-conservatively 101
	   scroll-margin 3
	   scroll-preserve-screen-position 't)

   #+end_src


** General

   - Remove all visual bloat
   - Set visual line mode t
   - Set fringe padding
   - Set line numbers relative for select modes

    #+begin_src emacs-lisp :tangle ./mf-gui.el
					      ;-------   General   -------\

      (scroll-bar-mode -1)
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (global-set-key (kbd "<f5>") 'menu-bar-mode)
      (tooltip-mode -1)
      (set-fringe-mode 10)
      (global-visual-line-mode t)
      (column-number-mode t)
      (global-display-line-numbers-mode t)
      (setq display-line-numbers-type 'relative)
      (setq display-line-numbers-width 3)

      (dolist (mode '(org-mode-hook
		      Info-mode-hook
		      term-mode-hook
		      shell-mode-hook
		      eshell-mode-hook
		      vterm-mode-hook
		      pdf-view-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))

    #+end_src


** Gui Packages

   | Package            | Description                       |
   |--------------------+-----------------------------------|
   | Diminish           | Hide selected modes from modeline |
   | Rainbow-Mode       | Render hex-colors as font hilight |
   | Rainbow-Delimiters | Color parenthesizes               |
   | Dired              | File manager                      |
   | Perspective        | Group buffers in to perspectives  |
   | Emojify            | Render Emojis                     |

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   GUI Packages   -------\

     (use-package diminish
       :config
       (diminish 'visual-line-mode)
       (diminish 'eldoc-mode)
       (diminish 'abbrev-mode))

     (use-package rainbow-mode
       :defer t
       :diminish)

     (use-package rainbow-delimiters
       :diminish
       :hook (prog-mode . rainbow-delimiters-mode))

     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho --group-directories-first")))

     (autoload 'dired-omit-mode "dired-x")

     (use-package dired-single
       :commands (dired dired-jump))

     (use-package dired-ranger
       :defer t)

     (use-package dired-collapse
       :defer t)

     (use-package perspective
       :defer t
       :custom
       (persp-mode-prefix-key (kbd "C-x x"))
       :bind (("C-x k" . persp-kill-buffer*))
       :init
       (persp-mode))

     (use-package emojify
       :hook (erc-mode . emojify-mode)
       :commands emojify-mode)

   #+end_src


** Fonts

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Fonts    -------\

     ;; (set-face-attribute 'default nil
     ;;		    :font "SauceCodePro Nerd Font")

     ;; (set-face-attribute 'fixed-pitch nil
     ;;		    :font "SauceCodePro Nerd Font")

   #+end_src


** Theme

   - Set custom theme dir
   - Don't load theme in terminal mode

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Theme   -------\

     (setq custom-theme-directory (concat user-emacs-directory "themes"))

     (when (or (display-graphic-p)(daemonp))
       (use-package doom-themes
	 :defer t)
       (load-theme 'doom-mfspacegrey t))


   #+end_src


** Modeline

   | Package  | Description                   |
   |----------+-------------------------------|
   | mlscroll | Scroll indicator for modeline |

   - Set Vim layer indicator faces
   - Flash Mode-Line instead of ring bell

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Modeline   -------\

     (use-package mlscroll
       :if (display-graphic-p)
       :unless (daemonp)
       :config
       (mlscroll-mode 1))

     (if (daemonp)
	 (add-hook 'server-after-make-frame-hook #'mlscroll-mode))

     ;; (use-package mlscroll
     ;;   :if (display-graphic-p)
     ;;   :init
     ;;   (mlscroll-mode 1)
     ;;   ;; :config
     ;;   ;; (mlscroll-mode 1)
     ;;   ;; :if (daemonp)
     ;;   ;; :hook (server-after-init . mlscroll-mode)
     ;;   :hook (server-after-make-frame . mlscroll-mode))

     ;; (use-package mlscroll
     ;;   ;; :if (display-graphic-p)
     ;;   :init
     ;;   (mlscroll-mode 1)
     ;;   ;; :if (daemonp)
     ;;   :hook ((server-after-init . mlscroll-mode)
     ;;	 (server-after-make-frame . mlscroll-mode)))

     (with-eval-after-load 'evil
       (setq evil-normal-state-tag
	     (propertize " <N> " 'face '((:background "DarkGoldenrod2" :foreground "black")))
	     evil-emacs-state-tag
	     (propertize " <E> " 'face '((:background "SkyBlue2"       :foreground "black")))
	     evil-insert-state-tag
	     (propertize " <I> " 'face '((:background "chartreuse3"    :foreground "black")))
	     evil-replace-state-tag
	     (propertize " <R> " 'face '((:background "chocolate"      :foreground "black")))
	     evil-motion-state-tag
	     (propertize " <M> " 'face '((:background "plum3"          :foreground "black")))
	     evil-visual-state-tag
	     (propertize " <V> " 'face '((:background "gray"           :foreground "black")))
	     evil-operator-state-tag
	     (propertize " <O> " 'face '((:background "sandy brown"    :foreground "black")))))

     (setq ring-bell-function
	   (lambda ()
	     (let ((orig-fg (face-foreground 'mode-line)))
	       (set-face-foreground 'mode-line "#000")
	       ;; (set-face-foreground 'mode-line "#fd5300")
	       (run-with-idle-timer 0.1 nil
				    (lambda (fg) (set-face-foreground 'mode-line fg))
				    orig-fg))))

    (message "------- Loaded gui.el -------")

   #+end_src


* sh.el
  (S)ave (H)ooks and (sh)ell scripts

  | Function           | Description                                 |
  |--------------------+---------------------------------------------|
  | mf/xrdb-xresources | Aftersave hook to reinit .Xresources        |
  | mf/org-dropbox     | Run dropbox when any ~/Dropbox file is open |

  #+begin_src emacs-lisp :tangle ./mf-sh.el
					    ;-------   Save Hooks   -------\

    (defun mf/xrdb-xresources ()
      "Run xrdb on ~/.Xresources if modified."
      (when (and (buffer-file-name) ; check buffer has a name
		 (string-equal (buffer-file-name)
			       (expand-file-name "~/.Xresources")))
	(let ((command-result (shell-command "xrdb ~/.Xresources")))
	  (when (= command-result 0)
	    (message "Xrdb Updated")))))

    (defun mf/add-xrdb-hook ()
      "Add mf/xrdb-xresources to 'after-save-hook'."
      (add-hook 'after-save-hook #'mf/xrdb-xresources nil :local))

    (add-hook 'conf-mode-hook #'mf/add-xrdb-hook)

  #+end_src

  - reset gc-cons-threshold to a reasonabe value
  #+begin_src emacs-lisp :tangle ./mf-sh.el

    (setq gc-cons-threshold (* 2 1000 1000))

    (message "------- Loaded sh.el -------")

  #+end_src


* Plans

** Top

*** Vertical Padding

(let ((margin (make-string 5 ?\n)))
    (put-text-property 1 (length margin) 'display margin)
    (insert margin))

**** i want to add visual padding at the top of the buffer when opens not adjust the line spacing

 You can add visual padding at the top of the buffer by adjusting the value of the variable =window-resize-pixelwise=. 

 Add the following code to your Emacs initialization file:

 #+begin_src
 (setq-default window-resize-pixelwise t)
 (setq-default frame-resize-pixelwise t)

 (defun set-frame-size-according-to-resolution ()
   (interactive)
   (if (display-graphic-p)
       (progn
         ;; use 80% height and 90% width of the available workspace
         (let* ((os-x-p (eq system-type 'darwin))
		(top-menu-height-p (and os-x-p (display-graphic-p) (eq window-system 'ns)))
		(pix-w (frame-pixel-width))
		(pix-h (frame-pixel-height))
		(pop-up-frames-p (and (boundp 'pop-up-frames) pop-up-frames))
		(frame-resize-pixelwise (and window-resize-pixelwise frame-resize-pixelwise))
		(menu-bar-height (if (and (display-graphic-p) menu-bar-mode) (frame-parameter nil 'menu-bar-lines 0) 0))
		(scroll-bar-height (if (and (display-graphic-p) scroll-bar-mode) (frame-parameter nil 'scroll-bar-height) 0))
		(fr-height (- pix-h (* (+ (/ pix-h 10) (* top-menu-height-p 1.5)) frame-resize-pixelwise)))
		(fr-width (* (/ (* (display-pixel-width) 0.9) (frame-char-width)) frame-resize-pixelwise)))
           (set-frame-size (selected-frame) (round fr-width) (round fr-height)))))))
 (add-hook 'window-setup-hook 'set-frame-size-according-to-resolution t)
 #+end_src

 This code will set the =window-resize-pixelwise= variable to true, which causes windows to be resized in units of pixels. The =set-frame-size-according-to-resolution= function sets the size of Emacs window to be 80% of the available height and 90% of the available width, and it accounts for any menu bars or scroll bars that may be displayed. By default, it will leave a small amount of visual padding at the top of the buffer.

 You can adjust the values used in the =set-frame-size-according-to-resolution= function to control how much padding is displayed, if necessary.

*** Evil Org mode
    - vim keys to move org headers and list items

**** normal mode tab doesnt insert chars but does org-cycle
	(add-hook 'evil-normal-state-entry-hook
         (lambda () (setq-local org-cycle-emulate-tab nil)))
	;; (define-key evil-normal-state-map (kbd "TAB") 'org-cycle)

*** Org Roam Include Recipes Sometimes functionality
*** Theme
    - Systemcrafters recomended theme patched with space gray colors
    - FIX UNABLE TO LOAD UNSPECIFIED BG
    - light mode toggle
    - Inspo
      - subline spacegray
      - doom-challenger-deep
      - doom-horizon
    - Fonts
      - code2001?
      - Like brin?
    - smerge show color fix
    - Change contrast through day toggleable

*** Completion
    - < snippet completion
    - Cape Corfu
    - Refine

**** Jump to end of word when corfu complete
**** LSP/eglot
***** Function info in minibuffer control
      pinned to static buffer?
***** elsip
***** Different completion delay for modes
****** Writing slow delay
****** Coding fast delay
**** Spelling
     - Ignore
     - Custom dictionary
     - Aspell
     - I-Spell
*** [[https://www.reddit.com/r/emacs/comments/rlli0u/whats_your_favorite_defadvice/][defadvice]]
   - Update to advice-add
     ;; (defun mf/kill-line-autoreindent-advice (orig-func &rest args)
     ;;   "Kill excess whitespace when joining lines.
     ;;	     If the next line is joined to the current line, kill the extra indent whitespace in front of the next line."
     ;;   (when (and (eolp) (not (bolp)))
     ;;	 (save-excursion
     ;;	   (forward-char 1)
     ;;	   (just-one-space 1)))
     ;;   (apply orig-func args))
     ;; (advice-add 'kill-line :before #'mf/kill-line-autoreindent-advice)
**** advice-add undo ignores whitespace that was added and removed
*** [[https://www.reddit.com/r/emacs/comments/ulsrb5/what_have_you_recently_removed_from_your_emacs/][removed]]
*** Kill-ring
    - Learn

*** Tab bar mode
    - Learn

*** Visual-Fill
    - minibuffer and refine
    - Marginalia/mini-buffer no text wrapping
*** Quote
    - [[https://github.com/arecker/wilfred-say][wilfred quotes]]
    (setq-default header-line-format "This is the header")
*** Indentation
    - Different auto indent behavior
*** Terminal version
    - Defer all unnecessary loading
*** Undo
    - undo-fu
    - vundo
    - undo-tree
*** Mode-line
**** Customize
**** Truncate File Name in Mode Line
     - Auto remove org roam file id
     - truncate any name when mode line is small
**** Doom inspiration
**** Telephone Line
*** GPT in minibuffer
    prompt from modeline wrapper, print result to small buffer messages or modeline
*** Hooks
**** Dropbox

    ;; (defun mf/dropbox ()
    ;;   (while (string-equal (file-name-directory)
    ;;		       (expand-file-name "~/Dropbox"))
    ;;     (shell-command "dropbox")))

    ;; (lambda () (add-hook 'after-save-hook #'mf/dropbox)

**** Dropbox Alternative Hook
     - Hook to run dropbox or alternative while and for a minute after in buffers from dropbox dir.
     - Remote File Backup and Source?
**** Compile suckless?
**** Tangle AIS

*** Deal with files
    - Undo tree
    - Auto Save
    - Archive

*** Windows and Buffers
**** Detect buffer and frame size and status
     ;; (if (eq (frame-parameter nil 'fullscreen) 'maximized)
     ;;     (message "Frame is maximized")
     ;;   (message "Frame is not maximized"))

**** Pin buffer in window
**** Key Driven Choose Buffer Screen
     - Screen accessible through key bind
       - Displays open buffers tiled
       - Key strokes to select buffer overlaid on buffer tile
**** Better window management
***** Window layout for ide
***** Work-Spaces
      - Eyebrowse
      - Perspective
      - beframe

**** Visually indicate selected buffer in minibuffer mode
**** Truncate File Name in Mode-Line
     - Auto remove org roam file id
     - truncate any name when mode line is small
**** detect buffer size and pad
**** Window layout for ide

*** visual box cursor can go anywhere
** Feature/Behavior
*** Minad Packages
**** Embark
     - actions for current selections
       - rename etc
**** Selectum
     - alternative
*** Arduino IDE
*** Startup
*** Modes
**** Work-Spaces
     - Eyebrowse
     - Perspecate
**** Tramp
     - Setup
**** Calc Mode
**** Erc
     - config
**** TreeMacs
*** straight.el?
*** Native Comp Settings
*** Gantt Charts
*** Org
**** Org Mode Extensions
***** Org Mode Literate Code Line Numbers
      the tangled line numbers are displayed in the org mode code blocks
***** Manipulating the Header In/Exclude Code-Block From Tangle

**** Capture
***** Debugging with file pointer
***** Notes
***** Todos
***** Templates

    (setq org-capture-templates
	  `(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "/Org/todo.org" "Captured")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	    ("j" "Journal Entries")
	    ("jj" "Journal" entry
	     (file+olp+datetree "~/Org/journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	     :clock-in :clock-resume
	     :empty-lines 1)))
	    ;; ("jm" "Meeting" entry
	    ;;  (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	    ;;  "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	    ;;  :clock-in :clock-resume
	    ;;  :empty-lines 1)))

	    ;; ("w" "Workflows")
	    ;; ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	    ;;  "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	    ;; ("m" "Metrics Capture")
	    ;; ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
	    ;;  "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))
***** Journal?
**** Agenda
***** Plan(ner)
***** dots
***** poporg
**** Org Mode Extensions
***** Org Mode Literate Code Line Numbers
      the tangled line numbers are displayed in the org mode code blocks
***** Disable code block from header
***** Manipulating the Header In/Exclude Code-Block From Tangle
**** Org Roam Setup
***** Roam Bookmarks?
**** habit
***** water plants
***** bills
**** Ellipses
**** Task Options?
**** Autex
**** Task Options?
**** Orgzly?
**** GTG David Allen
**** Latex
      - export
      - AUCTeX
      - bibliography
      - bibtex roam
*** Browser Bookmarks
*** Pomodoro
*** comint-previous-input
    - haskell repl rebind
*** Make Dired Like ranger?
*** lexical-binding
*** Email
**** Worth it?
*** Unbind all keys?
    - look into a toggle-able sparse custom key map
      - no mistakes
      - less functionality
	- if i need a function bound i should bind it myself
      - Toggle-able so I still have access to the bloat

** Bugs
*** Dir Local Vars load after org mode
**** all #+STARTUP: options don't work with .dir-locals.el

*** Org Roam Capture swallowing new lines
    fixed in native comp

