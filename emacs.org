#+title: Emacs Config

* init.el

** Startup

   #+begin_src emacs-lisp :tangle ./init.el

     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))

   #+end_src


** General
   
   - Enables auto updating buffers
   - Sets default directory
     
   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   General   -------\
     (global-auto-revert-mode t)

     ;;(setq default-directory "")

   #+end_src


** Package Manager

   - Sets repository locations
   - Initializes use package
     - Dowload packages if not installed
   - use-package-verbose for verbose startup
       
   #+begin_src emacs-lisp :tangle ./init.el

					     ;-------   Package Manager   -------\

     (require 'package)
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			      ("melpa" . "https://melpa.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")
			      ("melpa-stable" . "https://stable.melpa.org/packages/")))
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (eval-when-compile
     (require 'use-package))

     (setq use-package-always-ensure t)
     ;(setq use-package-verbose t)	

   #+end_src


** Packages

*** Completion

**** General

     | Package    | Description                               |
     |------------+-------------------------------------------|
     | Vertico    | Minimal completion                        |
     | SaveHist   | Saves minibuffer history                  |
     | Marginalia | Additional completion support             |
     | Orderless  | Orderless and wildcard completion support |
     | Emacs      | Minibuffer settings                       |

     #+begin_src emacs-lisp :tangle ./init.el

					       ;-------   Completion   -------\
       (use-package vertico
	 :diminish
	 :bind (:map vertico-map
		     ;; ("" . vertico-next)
		     ;; ("" . vertico-previous)
		     ("C-f" . vertico-exit))
	 :custom
	 (vertico-cycle t)
	 :init
	 (vertico-mode))

       (use-package savehist
	 :after vertico
	 :config
	 (savehist-mode))

       (use-package marginalia
	 :after vertico
	 :custom
	 (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	 :init
	 (marginalia-mode))

       (use-package orderless
	 :after vertico 
	 :init
	 (setq completion-styles '(orderless)
	       completion-category-defaults nil
	       completion-category-overrides '((file (styles partial-completion)))))

       (defun mf/get-project-root ()
	 (when (fboundp 'projectile-project-root)
	   (projectile-project-root)))

       (use-package consult
	 :demand t
	 :bind (("C-s" . consult-line)
		("C-M-l" . consult-imenu)
		("C-M-j" . persp-switch-to-buffer*)
		:map minibuffer-local-map
		("C-r" . consult-history))
	 :custom
	 (consult-project-root-function #'mf/get-project-root)
	 (completion-in-region-function #'consult-completion-in-region))

       (use-package emacs
	 :init
	 ;; Add prompt indicator to `completing-read-multiple'.
	 ;; Alternatively try `consult-completing-read-multiple'.
	 (defun crm-indicator (args)
	   (cons (concat "[CRM] " (car args)) (cdr args)))
	 (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	 ;; Do not allow the cursor in the minibuffer prompt
	 (setq minibuffer-prompt-properties
	       '(read-only t cursor-intangible t face minibuffer-prompt))
	 (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	 ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	 ;; Vertico commands are hidden in normal buffers.
	 ;; (setq read-extended-command-predicate
	 ;;       #'command-completion-default-include-p)

	 ;; Enable recursive minibuffers
	 (setq enable-recursive-minibuffers t))

     #+end_src


**** LSP

     #+begin_src emacs-lisp :tangle ./init.el
					       ;-------   LSP   -------\

       (defun efs/lsp-mode-setup ()
	 (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	 (lsp-headerline-breadcrumb-mode))

       (use-package lsp-mode
	 :commands (lsp lsp-deferred)
	 :hook (lsp-mode . mf/lsp-mode-setup)
	 :init
	 (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
	 :config
	 (lsp-enable-which-key-integration t))

       (use-package eglot
	 :after lsp-mode
	 :hook ((c-mode c++-mode objc-mode cuda-mode) .
		(lambda () (require 'eglot) (lsp)))
	 :config (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd"))) 

       (use-package web-mode
	 :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
	 :config
	 (setq-default web-mode-code-indent-offset 2)
	 (setq-default web-mode-markup-indent-offset 2)
	 (setq-default web-mode-attribute-indent-offset 2))

       ;; 1. Start the server with `httpd-start'
       ;; 2. Use `impatient-mode' on any buffer
       (use-package impatient-mode
	 :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

       (use-package skewer-mode
	 :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

       (use-package company
	 :after lsp-mode
	 :diminish 
	 :hook (lsp-mode . company-mode)
	 :bind (:map company-active-map
		     ("<tab>" . company-complete-selection))
	 (:map lsp-mode-map
	       ("<tab>" . company-indent-or-complete-common))
	 :custom
	 (company-minimum-prefix-length 1)
	 (company-idle-delay 0.0))

       (use-package company-box
	 :diminish 
	 :hook (company-mode . company-box-mode))

     #+end_src
     
     
*** Help
    
    | Package   | Description                                                       |
    |-----------+-------------------------------------------------------------------|
    | Which-Key | Displays available next keystrokes for keybinds after 1.5 seconds |
    | Helpful   | Better documentation                                              |
    | Info      | Padding for info mode                                             |
    
    #+begin_src emacs-lisp :tangle ./init.el

					      ;-------   Help   -------\

      (use-package helpful
	:commands (helpful-callable helpful-variable helpful-command helpful-key)
	;;  :custom                           ; for ivy
	;;  (describe-fucntion-function #'helpful-callable)
	;;  (describe-variable-function #'helpful-variable)
	:bind
	([remap describe-function] . helpful-function)
	([remap describe-symbol] . helpful-symbol)
	([remap describe-variable] . helpful-variable)
	([remap describe-command] . helpful-command)
	([remap describe-key] . helpful-key))

     (defun mf/info-mode-visual-fill ()
       (setq visual-fill-column-width 160
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package info
	:hook (Info-mode . mf/info-mode-visual-fill))

    #+end_src
    

*** General Tools

    | Package   | Descrition                     |
    |-----------+--------------------------------|
    | Undo-Tree | Visualization of undo branches |
    | Pdf-Tools | Pdf support                    |

    #+begin_src emacs-lisp :tangle ./init.el

					      ;-------   General Tools   -------\

      (use-package undo-tree
	:defer t) 

      (use-package pdf-tools
	:defer t
	:pin manual ;; manually update
	:mode ("\\.pdf\\'" . pdf-view-mode)
	:config
	(pdf-tools-install)
	(setq-default pdf-view-display-size 'fit-page)
	(setq pdf-annot-activate-created-annotations t)
	(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

    #+end_src


*** Version Control

    | Package    | Description                 |
    |------------+-----------------------------|
    | Projectile | Project interaction library |
    | Magit      | Git porcilain               |
    | Forge      | Additional git features     |




    #+begin_src emacs-lisp :tangle ./init.el
					      ;-------   Version Control   -------\
      (use-package projectile
	:diminish projectile-mode
	:config (projectile-mode)
	;;:custom ((projectile-completion-system 'vertico))
	:bind-keymap
	("C-c p" . projectile-command-map)
	:init
	(when (file-directory-p "~/Documents")
	  (setq projectile-project-search-path '("~/Documents")))
	(setq projectile-switch-project-action #'projectile-dired))

      (use-package magit
      :commands magit-status)
      ;;  :Custom                             ; opens diff in current buffer
      ;;  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

      (use-package forge
	:after magit)

    #+end_src


** Load Paths
   - Paths of other elsip init files

   #+begin_src emacs-lisp :tangle ./init.el

					     ;-------   Load Paths   -------\

     (load "~/.emacs.d/mf-gui.el")
     (load "~/.emacs.d/mf-keys.el")
     (load "~/.emacs.d/mf-templates.el")
     (load "~/.emacs.d/mf-org.el")
     (load "~/.emacs.d/mf-sh.el")

   #+end_src
   
  
** File Types

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   File Types   -------\

   ;;  (add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))

   #+end_src


* mf-gui.el

** GUI

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   General   -------\

     ;;(setq inhibit-startup-message t)
     (scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tool-bar-mode -1)
     (global-set-key (kbd "<f5>") 'menu-bar-mode)
     (set-fringe-mode 10)                    ; padding
     (tooltip-mode -1)
     ;;(setq visible-bell t)

     (column-number-mode)
     (global-display-line-numbers-mode t)

     (dolist (mode '(org-mode-hook
		     Info-mode-hook
		     term-mode-hook
		     shell-mode-hook
		     eshell-mode-hook
		     pdf-view-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src


** Theme

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Theme   -------\
     (setq custom-theme-directory "~/.emacs.d/themes")

     ;; (use-package timu-spacegrey-theme
     ;;   :ensure t
     ;;   :config
     ;;   (load-theme 'timu-spacegrey t))

     (load-theme 'mf-spacegrey t)

     ;; (use-package sublime-themes)
     ;; ;;	:config
     ;; ;;	(load-theme 'brin t))

     ;; (use-package moe-theme
     ;;   :defer 0)

     ;; (use-package doom-themes
     ;;   :defer 0)

   #+end_src



** Gui Packages

   | Package            | Description                              |
   |--------------------+------------------------------------------|
   | Diminish           | Hide selected modes from modeline        |
   | Rainbow-Delimiters | Color parethesies                        |
   | mlscroll           | Document location indicator for modeline |
   
   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   GUI Packages   -------\

     (use-package diminish)

     (eval-after-load "eldoc"
	'(diminish 'eldoc-mode))

     (diminish 'abbrev-mode)

     (use-package rainbow-delimiters
       :diminish
       :hook (prog-mode . rainbow-delimiters-mode))

     (use-package mlscroll
       :config
     ;;  breaks evil status indicator
     ;;  (setq mlscroll-shortfun-min-width 11) ;truncate which-func, for default mode-line-format's
       (mlscroll-mode 1))

     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho --group-directories-first")))

     (autoload 'dired-omit-mode "dired-x")	

     (use-package dired-single
       :commands (dired dired-jump))

     (use-package dired-ranger
       :defer t)

     (use-package dired-collapse
       :defer t)

   #+end_src 

 
** Fonts

   #+begin_src emacs-lisp :tangle ./mf-gui.el

					;-------   Fonts    -------\

;(set-face-attribute 'default nil :font "FONT NAME" :height ##)

   #+end_src


* mf-keys.el

** Key Packages

   | Package          | Description                      |
   |------------------+----------------------------------|
   | Evil             | Extensible VIm Layers            |
   | Evili Collection | Additional mode support for Evil |
   | General          | Leader keys                      |
   | Hydra            | Prefix bindings                  |

   #+begin_src emacs-lisp :tangle ./mf-keys.el
						  ;-------   Key Packages   -------\

	  (use-package evil
	    :init
	    (setq evil-want-integration t)
	    (setq evil-want-keybinding nil)
	    (setq evil-want-C-u-scroll t)
	    (setq evil-want-C-i-jump nil)
	    (setq evil-mode-line-format 'before)
	    (setq evil-disable-insert-state-bindings t)
	    ;;(setq evil-undo-system undo-tree)
	    :config
	    (evil-mode 1)
	    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
	    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

	    ;; Use visual line motions even outside of visual-line-mode buffers
	    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
	    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

	    (evil-set-initial-state 'messages-buffer-mode 'normal)
	    (evil-set-initial-state 'dashboard-mode 'normal))

	  (use-package evil-collection
	    :after evil
	    :diminish evil-collection-unimpaired-mode
	    :config
	    (evil-collection-init))

	  (use-package general
	    :after evil
	    :config
	    (general-create-definer mf/leader-keys
	      :keymaps '(normal insert visual emacs)
	      :prefix "SPC"
	      :global-prefix "C-SPC"
	      ))

	   (use-package which-key
	     :defer 0 
	     :diminish which-key-mode
	     :config
	     (which-key-mode)
	     (setq which-key-idle-delay 1.5))

	  (use-package hydra
	    :defer t)

   #+end_src


** Binds

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Key Binds   -------\


  (evil-collection-define-key 'normal 'dired-mode-map
    "h" 'dired-single-up-directory
    "H" 'dired-omit-mode
    "l" 'dired-single-buffer
    "y" 'dired-ranger-copy
    "X" 'dired-ranger-move
    "p" 'dired-ranger-paste)

   #+end_src

 
** Which and Leader Keys

   | Function         | Description                      |
   |------------------+----------------------------------|
   | mf/leader-keys   | Define leader keys t, s, and fde |
   | hydra-text-scale | Scale text with j and k          |
   
   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Which and Leader Keys   -------\

     (mf/leader-keys
       "t" '(:ignore t :which-key "toggles")
       "f" '(:ignore t :which-key "find")
       "ts" '(hydra-text-scale/body :which-key "scale text")
       "ff" '(hydra-find-file/body :which-key "find file")
       "fd" '(hydra-find-dir/body :which-key "find directory")
       "b" '(hydra-switch-buffer/body :which-key "switch buffer")
       "w" '(hydra-switch-window/body :which-key "switch window"))

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("<escape>" nil "finished" :exit t))

     (defhydra hydra-find-file (:timeout 4)
       "select file"
       ("e" (find-file (expand-file-name "~/.emacs.d/emacs.org"))"emacs.org" :exit t)
       ("t" (find-file (expand-file-name "~/Org/todo.org"))"todo.org" :exit t)
       ("n" (find-file (expand-file-name "~/Org/notes.org"))"notes.org" :exit t)
       ("r" (find-file (expand-file-name "~/Documents/Recipe_Book/Recipe_Book_2/recipes.org"))"recipes.org" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-find-dir (:timeout 4)
       "select dir"
       ("e" (dired (expand-file-name "~/.emacs.d"))".emacs.d" :exit t)
       ("c" (dired (expand-file-name "~/Code"))"Code" :exit t)
       ("p" (dired (expand-file-name "~/Documents/PDFs"))"PDFs" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-switch-buffer (:timeout 4)
       "switch buffer"
       ("j" (switch-to-next-buffer)"next")
       ("k" (switch-to-prev-buffer)"previous")
       ("q" (delete-window)"close")
       ("Q" (kill-this-buffer)"kill")
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-switch-window (:timeout 4)
       "switch window"
       ("j" (other-window 1)"next")
       ("k" (other-window -1)"previous")
       ("q" (delete-window)"close") 
       ("Q" (kill-this-buffer)"kill") 
       ("<escape>" nil "exit" :exit t))

    #+end_src


* mf-org.el

** Org Functions

   | Function                | Description                                                 |
   |-------------------------+-------------------------------------------------------------|
   | mf/org-mode-set         | Diminish indent mode, visual line mode and evil auto indent |
   | mf/org-mode-visual-fill | Org mode column padding settings                            |

   #+begin_src emacs-lisp :tangle ./mf-org.el
					     ;-------   Org Function   -------\

     (defun mf/org-mode-setup ()
       (diminish 'org-indent-mode)
       ;;  (variable-pitch-mode 1)
       (visual-line-mode 1)
       (setq evil-auto-indent nil
	     org-adapt-indentation t))

     (defun mf/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

   #+end_src


** Org Packages

   #+begin_src emacs-lisp :tangle ./mf-org.el

					     ;-------   Packages   -------\

     (use-package org
       :pin org
       :commands (org-capture org-agenda)
       :hook (org-mode . mf/org-mode-setup)
       :config (setq org-startup-folded t
		     ;;org-ellipsis " ▾"
		     org-log-agenda-sater-with-log-mode t
		     org-log-done 'time
		     org-log-into-drawer t))

     (setq org-todo-keywords
	   '((type "TODO(t)" "HOLD(h)" "NEXT(n)" "|" "DONE(d!)")))

     (setq org-refile-targets
	   '(("Archive.org" :maxlevel . 1)
	     ("Tasks.org" :maxlevel . 1)))

     ;; Save Org buffers after refiling!
     (advice-add 'org-refile :after 'org-save-all-org-buffers)

     (use-package org-bullets
       :hook (org-mode . org-bullets-mode))

     (use-package visual-fill-column
	:hook (org-mode . mf/org-mode-visual-fill))

   #+end_src


** Org Agenda

   #+begin_src emacs-lisp :tangle ./mf-org.el

					     ;-------   Agenda   -------\

     (setq org-agenda-files
	   '("~/Documents/Org/todo.org"
	     "~/Documents/Org/to_get.org"))


     (setq org-agenda-custom-commands
	   '(("o" "Overview"
	      ((agenda "" ((org-deadline-warning-days 7)))
	       (todo "NEXT"
		     ((org-agenda-overriding-header "Next Tasks")))
	       (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	     ("n" "Next Tasks"
	      ((todo "NEXT"
		     ((org-agenda-overriding-header "Next Tasks")))))


	     ("d" "Computer" tags-todo "computer")

	     ("l" "Learn" tags-todo "learn")

	     ("r" "Write" tags-todo "write")

	     ("w" "Elec Eng" tags-todo "ee")

	     ("p" "Music Production" tags-todo "music")

	     ("W" "Workflow"
	      ((todo "PLAN"
		     ((org-agenda-overriding-header "Plan")
		      (org-agenda-FILES ORG-AGENDA-files)))
	       (todo "DESIGN"
		     ((org-agenda-overriding-header "Design")
		      (org-agenda-files org-agenda-files)))
	       (todo "MAKE"
		     ((org-agenda-overriding-header "Make")
		      (org-agenda-files org-agenda-files)))))))

     (setq org-tag-alist
	   '((:startgroup)
	     ;; Put mutually exclusive tags here
	     (:endgroup)
	     ("computer" . ?d)
	     ("learn" . ?l)
	     ("write" . ?r)
	     ("make" . ?f)
	     ("ee" . ?w)
	     ("music" . ?p)
	     ("idea" . ?i)))

   #+end_src


** Org Keys

   #+begin_src emacs-lisp :tangle ./mf-org.el

					     ;-------   Org Keys   -------\

     ;;(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))        
     ;;(define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     (define-key global-map "\C-cc" 'org-capture)
     ;;(define-key global-map (kbd "C-c c")
     ;;    (lambda () (interactive) (org-capture nil "jj")))
   #+end_src


* mf-templates.el

  #+begin_src emacs-lisp :tangle ./mf-templates.el
						;-------   Tempo Templates   -------\

    (with-eval-after-load 'org
      ;; This is needed as of Org 9.2
      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("eli" . "src emacs-lisp :tangle ./init.el"))
      (add-to-list 'org-structure-template-alist '("elg" . "src emacs-lisp :tangle ./mf-gui.el"))
      (add-to-list 'org-structure-template-alist '("elk" . "src emacs-lisp :tangle ./mf-keys.el"))
      (add-to-list 'org-structure-template-alist '("elo" . "src emacs-lisp :tangle ./mf-org.el"))
      (add-to-list 'org-structure-template-alist '("elt" . "src emacs-lisp :tangle ./mf-templates.el"))
      (add-to-list 'org-structure-template-alist '("els" . "src emacs-lisp :tangle ./mf-sh.el"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (tempo-define-template "org-recipe"
			     '( "** "p n n
				"*** Meta:" n n
				"   Dificulty    : " n
				"   Time         : " n
				"   Time Cooking : " n
				"   Servings     : " n
				"   Equipment    : "n n
				"*** Ingredients:"n n
				"    | Ingredient | Amount |" n
				"    |------------+--------|" n
				"    |            |        |" n
				"    |            |        |" n
				"    |            |        |"n n
				"*** Instrucions:"n n
				"    1. "n n
				"*** Notes:"n n
				"    - " n
				)
			     "<r" "Insert org-recipe" 'org-tempo-tags))


					    ;-------   Org Capture Templates   -------\


    (setq org-capture-templates
	  `(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "/Org/todo.org" "Captured")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	    ("j" "Journal Entries")
	    ("jj" "Journal" entry
	     (file+olp+datetree "~/Org/journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	     :clock-in :clock-resume
	     :empty-lines 1)))
	    ;; ("jm" "Meeting" entry
	    ;;  (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	    ;;  "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	    ;;  :clock-in :clock-resume
	    ;;  :empty-lines 1)))

	    ;; ("w" "Workflows")
	    ;; ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	    ;;  "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	    ;; ("m" "Metrics Capture")
	    ;; ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
	    ;;  "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

 #+end_src


* mf-sh.el

  | Function                  | Description                                  |
  |---------------------------+----------------------------------------------|
  | mf/org-babel-tangle-conig | Aftersave hook to babel tangle to init files |
  | mf/xrdb-xresources        | Aftersave hook to reinit .Xresources         |
  | mf/org-dropbox            | Run dropbox when any ~/Dropbox file is open  |

  - reset gc-cons-threshold to a reasonabe value
  #+begin_src emacs-lisp :tangle ./mf-sh.el
					    ;-------   Save Hooks   -------\

    (defun mf/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
			  (expand-file-name user-emacs-directory))
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mf/org-babel-tangle-config)))


    (defun mf/xrdb-xresources ()
      (when (string-equal (buffer-file-name)
			  (expand-file-name "~/.dotfiles/.Xresources"))
	(and (shell-command "xrdb ~/.Xresources")
	     (message "xrdb updated"))))


    (add-hook 'conf-mode-hook (lambda () (add-hook 'after-save-hook #'mf/xrdb-xresources)))


    ;; (defun mf/dropbox ()
    ;;   (while (string-equal (file-name-directory)
    ;; 		       (expand-file-name "~/Dropbox"))
    ;;     (shell-command "dropbox")))

    ;; (add-hook ??)

	 ;;     ;(defun xrdb-xresources ()
	 ;;  "Running xrdb ~/.Xresources"
	 ;;  (when (eq major-mode 'conf-mode)
	 ;;    (shell-command-to-string (format "xrdb ~/.Xresources %s" buffer-file-name))))

	 ;;(defun xrdb-xresources ()
	 ;;  "xrdb ~/.Xresource"
	 ;;  (let* ((match (assoc (buffer-file-name) xresrouces)))
	 ;;    (when match
	 ;;      (shell-command (cdr match)))))

	 (setq gc-cons-threshold (* 2 1000 1000))
  #+end_src
