#+TITLE: Emax Config

* init.el

** Startup
   the first file emacs will load

   - Change garbage collection threshold
     - The default is 800 000 bytes
   - Display Emacs load time and gcs
   - Refresh dwm blocks if in daemon mode
   - Custom scratch message
   - Inhibit startup Message

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Startup   -------\

     (setq gc-cons-threshold (* 50 1000 1000))

     (add-hook 'emacs-startup-hook
	       (lambda ()
		 (message "*** Emacs loaded in %s with %d garbage collections."
			  (format "%.2f seconds"
				  (float-time
				   (time-subtract after-init-time before-init-time)))
			  gcs-done)))

     (if (daemonp)
	 (add-hook 'emacs-startup-hook
	       (lambda ()
		 (shell-command "pkill -RTMIN+7 dwmblocks"))))

     (setq initial-scratch-message "")

     (setq inhibit-startup-message t)

   #+end_src


** Kill-Hook

   - Refresh dwmblocks when emacs is killed

   #+begin_src emacs-lisp :tangle ./init.el
						  ;-------   Kill Hooks   -------\
     (if (daemonp)
	 (add-hook 'kill-emacs-hook
		   (lambda ()
		     (shell-command "pkill -RTMIN+7 dwmblocks"))))

   #+end_src


** Package Manager

   | Package            | Description                                     |
   |--------------------+-------------------------------------------------|
   | Package            | The Emacs package utility                       |
   | Use-Package        | Macros for cleaner init files                   |
   | Use-Package-Ensure | Ensures all use-packaged packages are installed |

   - Set package repository locations
   - Install use-package if not installed
   - Make sure all packages are installed
   - Initialize use-package on non-linux systems
   - use-package-verbose for annoying messages

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Package Manager   -------\

     (require 'package)

     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
			      ("melpa" . "https://melpa.org/packages/")
			      ("org" . "https://orgmode.org/elpa/")
			      ("melpa-stable" . "https://stable.melpa.org/packages/")))

     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (eval-when-compile
     (require 'use-package))

     (require 'use-package-ensure)
     (setq use-package-always-ensure t)
     (setq use-package-always-demand (daemonp))

     (setq use-package-verbose t)

   #+end_src


** General Features

   - Enable buffer auto-revert (auto-update)
     - Disable Auto reverting in Buffer-menu-mode
   - Open Buffer List in same window.
   - Configure auth-source
   - Quit bind prompts for confirmation in graphical mode
   - Restore session on restart
   - Relative line numbers

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   General   -------\

     (use-package autorevert)
     (setq global-auto-revert-ignore-modes (list 'Buffer-menu-mode))
     (setq global-auto-revert-non-file-buffers t)
     (global-auto-revert-mode t)

     (setq display-buffer-alist
	   (cons
	    '("\\*Buffer List\\*"
	      (display-buffer-same-window))
	    display-buffer-alist))

     (setq auth-sources '("~/Documents/Keys/.authinfo.gpg"))

     (when (display-graphic-p)
       (setq confirm-kill-emacs 'y-or-n-p))

     (desktop-save-mode 0)
     ;; enable breaks bufferp switching


   #+end_src


** Load Paths

   - Paths of other elsip init files

   #+begin_src emacs-lisp :tangle ./init.el
					     ;-------   Load Paths   -------\

     (load (concat user-emacs-directory "mf-gui.el"))
     (load (concat user-emacs-directory "mf-packages.el"))
     (load (concat user-emacs-directory "mf-keys.el"))
     (load (concat user-emacs-directory "mf-org.el"))
     (load (concat user-emacs-directory "mf-templates.el"))
     (load (concat user-emacs-directory "mf-sh.el"))

     (setq custom-file (locate-user-emacs-file "mf-custom.el"))
     (load custom-file 'noerror 'nomessage)

   #+end_src


* packages.el

** Help

   | Package | Description           |
   |---------+-----------------------|
   | Helpful | Better documentation  |
   | Info    | Padding for info mode |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Help   -------\

     (use-package helpful
       :commands (helpful-callable helpful-variable helpful-command helpful-key)
       :bind
       ([remap describe-function] . helpful-function)
       ([remap describe-symbol] . helpful-symbol)
       ([remap describe-variable] . helpful-variable)
       ([remap describe-command] . helpful-command)
       ([remap describe-key] . helpful-key))


     (defun mf/column-padding()
       (setq visual-fill-column-width 77
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package info
       :hook (Info-mode . mf/column-padding))

   #+end_src


** Completion

*** General

    | Package    | Description                                   |
    |------------+-----------------------------------------------|
    | Vertico    | Vertical mini-buffer completion               |
    | SaveHist   | Saves minibuffer history                      |
    | Marginalia | Additional mini-buffer completion information |
    | Orderless  | Orderless and wildcard completion support     |
    | Consult    | Further mini-buffer completion                |
    | Corfu      | Completion in region                          |
    | Emacs      | Minibuffer settings                           |

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   Completion   -------\

      (use-package vertico
	:diminish
	:bind (:map vertico-map
		    ("C-f" . vertico-exit))
	:custom
	(vertico-cycle t)
	:init
	(vertico-mode))

      (use-package savehist
	:after vertico
	:config
	(savehist-mode))

      (use-package marginalia
	:after vertico
	:custom
	(marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
	:init
	(marginalia-mode))

      (use-package orderless
	:after vertico
	:init
	(setq completion-styles '(orderless)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))

      (defun mf/get-project-root ()
	(when (fboundp 'projectile-project-root)
	  (projectile-project-root)))

      (use-package consult
	:demand t
	:bind (("C-s" . consult-line)
	       ("C-M-l" . consult-imenu)
	       ("C-M-j" . persp-switch-to-buffer*)
	       :map minibuffer-local-map
	       ("C-r" . consult-history))
	:custom
	(consult-project-root-function #'mf/get-project-root)
	(completion-in-region-function #'consult-completion-in-region))

      (use-package corfu
	:bind (:map corfu-map
		    ("C-n" . corfu-next)
		    ("C-p" . corfu-previous)
		    ("C-d"  . corfu-quit))
	:custom
	(corfu-cycle t)
	(corfu-auto t)
	(corfu-auto-delay .5)
	(corfu-auto-prefix 1)
	;:config
	;(corfu-global-mode)
	:hook
	(after-init . global-corfu-mode))

      (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; Alternatively try `consult-completing-read-multiple'.
	(defun crm-indicator (args)
	  (cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)

	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

	;; Emacs 28: Hide commands in M-x which do not work in the current mode.
	;; Vertico commands are hidden in normal buffers.
	;; (setq read-extended-command-predicate
	;;       #'command-completion-default-include-p)

	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))

    #+end_src


*** AI

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   AI   -------\

      (use-package gptel
	:config
	(setq gptel-default-mode 'org-mode)
	(setq visual-column-width 77)
	(setq gptel-api-key (let ((secret (car (auth-source-search :host "openai"
								     :max 1))))
			      (when (functionp (plist-get secret :secret))
				(funcall (plist-get secret :secret))))))

    #+end_src


*** Spelling

- Set $DICPATH to "$HOME/Documents/Dictionaries" for hunspell.
- Tell ispell-mode to use hunspell.

     #+begin_src emacs-lisp :tangle ./mf-packages.el

       (setenv
	"DICPATH"
	(concat (getenv "HOME") "/Documents/Dictionaries"))

       (setq ispell-program-name "/usr/bin/hunspell")

       (use-package flyspell
	 :hook ((org-mode . flyspell-mode)
		(text-mode . flyspell-mode)
		(prog-mode . flyspell-prog-mode)))

       (global-set-key (kbd "C-c f") 'flyspell-mode )

       (use-package whitespace)

       (global-set-key (kbd "C-c w") 'whitespace-mode )

     #+end_src


*** LSP

    #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   LSP   -------\

      (use-package eglot
	:hook ((c-mode c++mode obj-mode cuda-mode js-mode web-mode) . eglot-ensure)
	:config (add-to-list 'eglot-server-programs '((c++-mode c-mode) "clangd")))

      (use-package web-mode
	:mode "\\.html?\\'"
	;; :mode "\\\\.(html?\\|ejs\\|tsx\\|jsx\\)\\'"
	:config
	(setq-default web-mode-code-indent-offset 2)
	(setq-default web-mode-markup-indent-offset 2)
	(setq-default web-mode-attribute-indent-offset 2))

      ;; 1. Start the server with `httpd-start'
      ;; 2. Use `impatient-mode' on any buffer
      (use-package impatient-mode
	;;:mode "\\.html?\\'")
	:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

      (use-package skewer-mode
	;;:mode "\\.html?\\'")
	:mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'")

      (use-package python-mode
	:hook (python-mode . eglot-ensure)
	:custom
	;; NOTE: Set these if Python 3 is called "python3" on your system!
	(python-shell-interpreter "python3")
	(dap-python-executable "python3"))

      (use-package haskell-mode
	:defer t)

      (use-package racket-mode
	:defer t)

    #+end_src


** REPL

   #+begin_src emacs-lisp :tangle ./mf-packages.el

     (use-package slime
       :defer t
       :config
       (setq inferior-lisp-program "sbcl")
       (add-to-list 'load-path "/usr/share/emacs/site-lisp/slime/")
       (slime-setup '(slime-fancy)))

   #+end_src


** Version Control

   | Package    | Description                 |
   |------------+-----------------------------|
   | Projectile | Project interaction library |
   | Magit      | Git porcilain               |
   | Forge      | Additional git features     |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Version Control   -------\

     (use-package projectile
       :diminish projectile-mode
       :config (projectile-mode)
       ;;:custom ((projectile-completion-system 'vertico))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/Documents")
	 (setq projectile-project-search-path '("~/Documents")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package magit
     :commands magit-status)
     ;; :Custom                             ; opens diff in current buffer
     ;; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)

     (use-package forge
       :after magit)

   #+end_src


** Terminals

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Terminals   -------\

     (use-package vterm
       :commands vterm
       :config
       (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
       ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
       (setq vterm-max-scrollback 10000))

   #+end_src


** Remote Access

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					     ;-------   Tramp   -------\

     (use-package tramp
       :defer t
       :config
       (setq tramp-default-method "ssh"))

   #+end_src


** ERC

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					      ;-------   ERC   -------\

     (when (display-graphic-p)
       (use-package erc
	 :defer t
	 :init
	 (setq erc-server "irc.libera.chat"
	       ;; erc-nick ""
	       ;; erc-user-full-name ""

	       erc-track-shorten-start 8	; Length of channel notifcation in mode-line
	       ;; erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
	       erc-kill-buffer-on-part t
	       erc-auto-query 'bury		; No auto-focus buffer when mentioned	
	       erc-fill-column 79		; Defualt
	       erc-fill-function 'erc-fill-static
	       erc-fill-static-center 20
	       erc-track-exclude-types '("JOIN" "NICK" "QUIT" "MODE" "AWAY")
	       erc-track-visibility nil)   ; Only use the selected frame to consider notification seen
	 :config
	 (add-to-list 'erc-modules 'notifications)
	 (add-to-list 'erc-modules 'spelling)
	 (erc-services-mode 1)
	 (erc-update-modules))

					     ;-------   ERC Packages   -------\

       (use-package erc-hl-nicks
	 :after erc
	 :config
	 (add-to-list 'erc-modules 'hl-nicks))

       (use-package erc-image
	 :after erc
	 :config
	 (setq erc-image-inline-rescale 300)
	 (add-to-list 'erc-modules 'image)))

   #+end_src


** File Types

    | Package   | Descrition              |
    |-----------+-------------------------|
    | Pdf-Tools | Pdf support             |
    |           | Handling for .ino files |

   #+begin_src emacs-lisp :tangle ./mf-packages.el
					    ;-------   File Types   -------\

     (use-package pdf-tools
       :defer t
       ;:pin manual ;; manually update *****breaks first install*****
       :mode ("\\.pdf\\'" . pdf-view-mode)
       :config
       (pdf-tools-install)
       (setq-default pdf-view-display-size 'fit-page)
       (setq pdf-annot-activate-created-annotations t)
       (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))

     (add-to-list 'auto-mode-alist
		  '("\\.ino\\'" . (lambda ()
				    (c-mode))))

   #+end_src


* keys.el

** Key Packages

   | Package         | Description                                                       |
   |-----------------+-------------------------------------------------------------------|
   | Evil            | Vim Layers                                                        |
   | Evil Collection | Additional mode support for Evil                                  |
   | General         | Leader keys                                                       |
   | Which-Key       | Displays available next keystrokes for keybinds after 1.5 seconds |
   | Hydra           | Prefix bindings                                                   |

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Key Packages   -------\

     (use-package evil
       :init
       (setq evil-want-integration t)
       (setq evil-want-keybinding nil)
       (setq evil-want-C-u-scroll t)
       (setq evil-want-C-i-jump nil)
       (setq evil-respect-visual-line-mode t)
       (setq evil-mode-line-format '(before . mode-line-front-space))
       (setq evil-disable-insert-state-bindings t)
       (setq evil-want-fine-undo t)
       ;; (setq evil-undo-system 'undo-tree)
       :config
       (evil-mode 1)
       (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
       (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

       ;; Use visual line motions even outside of visual-line-mode buffers
       (evil-global-set-key 'motion "j" 'evil-next-visual-line)
       (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

       (evil-set-initial-state 'messages-buffer-mode 'normal)
       (evil-set-initial-state 'dashboard-mode 'normal))

     (use-package evil-collection
       :after evil
       :diminish evil-collection-unimpaired-mode
       :config
       (evil-collection-init))

     (use-package general
       :after evil
       :config
       (general-create-definer mf/general-keys
	 :keymaps '(normal insert visual emacs)
	 :prefix "SPC"
	 :global-prefix "M-SPC"))

     (use-package which-key
	:defer 0
	:diminish which-key-mode
	:config
	(which-key-mode)
	(setq which-key-idle-delay .55))

     (use-package hydra
       :defer t)

   #+end_src


** Binds

   - Vim binds for dired.
   - Open 'Recent Files' buffer.

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Key Binds   -------\
     (defun dw/dont-arrow-me-bro ()
	 (interactive)
	 (message "Arrow keys are bad, you know?"))

     ;; Disable arrow keys in normal and visual modes
     (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
     (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
     (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

     (evil-collection-define-key 'normal 'dired-mode-map
       "h" 'dired-single-up-directory
       "H" 'dired-omit-mode
       "l" 'dired-single-buffer
       "y" 'dired-ranger-copy
       "X" 'dired-ranger-move
       "p" 'dired-ranger-paste)

     (add-hook 'special-mode-hook
	       (lambda ()
		 (define-key evil-normal-state-local-map
		   (kbd "q") 'kill-buffer-and-window)))

     (recentf-mode 1)
     (global-set-key (kbd "C-x M-f") 'recentf-open-files)

   #+end_src


** Which and General Keys

   | Function         | Description                     |
   |------------------+---------------------------------|
   | mf/general-keys  | Define leading keys in keybinds |
   | hydra-text-scale | Scale text with j and k         |

   #+begin_src emacs-lisp :tangle ./mf-keys.el
					     ;-------   Which and Leader Keys   -------\

     (mf/general-keys
       "t" '(:ignore t :which-key "toggles")
       "ts" '(hydra-text-scale/body :which-key "scale text")
       "tl" '(display-line-numbers-mode :which-key "line-numbers")
       "tp" '(visual-fill-column-mode :which-key "padding")

       "f" '(:ignore t :which-key "find")
       "ff" '(hydra-find-file/body :which-key "find file")
       "fc" '(hydra-find-config/body :which-key "find conf.")
       "fd" '(hydra-find-dir/body :which-key "find dir.")

       "x" '(:ignore t :which-key "eval")
       "xe" '(hydra-eval-emacs/body :which-key "emacs")
       "b" '(hydra-switch-buffer/body :which-key "switch buffer")
       "w" '(hydra-switch-window/body :which-key "switch window")
       "v" '(vterm :which-key "vterm")
       "m" '(mf/switch-to-messages :which-key "*Messages*")
       "s" '(mf/switch-to-scratch :which-key "*scratch*")
       "SPC" '(which-key-show-full-major-mode :which-key "which-key"))

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("<escape>" nil "finished" :exit t))

     (defhydra hydra-find-file (:timeout 4)
       "select file"
       ("e" (find-file (expand-file-name (concat user-emacs-directory "emacs.org")))"emacs.org" :exit t)
       ("t" (find-file (expand-file-name "~/Org/todo.org"))"todo.org" :exit t)
       ("n" (find-file (expand-file-name "~/Org/notes.org"))"notes.org" :exit t)
       ("r" (find-file (expand-file-name "~/Documents/Recipe_Book/Recipe_Book_2/recipes.org"))"recipes.org" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-find-config (:timeout 4)
       ("t" (find-file (concat custom-theme-directory "/mf-spacegrey-theme.el"))"theme" :exit t)
       ("d" (find-file (expand-file-name "~/.config/mf-dwm/config.h"))"dwm" :exit t)
       ("D" (find-file (expand-file-name "~/.config/mf-dwm/config.def.h"))"dwm" :exit t)
       ("x" (find-file (expand-file-name "~/.xinitrc"))".xinitrc" :exit t)
       ("r" (find-file (expand-file-name "~/.Xresources"))".Xresrouces" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-find-dir (:timeout 4)
       "select dir"
       ("e" (dired (expand-file-name user-emacs-directory))"emacs" :exit t)
       ("c" (dired (expand-file-name "~/Code"))"Code" :exit t)
       ("o" (dired (expand-file-name org-directory))"Org" :exit t)
       ("C" (dired (expand-file-name "~/.config"))"Config" :exit t)
       ("p" (dired (expand-file-name "~/Documents/PDFs"))"PDFs" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-switch-buffer (:timeout 4)
       "switch buffer"
       ("j" (switch-to-next-buffer)"next")
       ("k" (switch-to-prev-buffer)"previous")
       ("n" (lambda ()
	      (interactive)
	      (split-window-right)
	      (windmove-right))"v. split")
       ("N" (lambda ()
	      (interactive)
	      (split-window-below)
	      (windmove-down)) "h. split")
       ("q" (delete-window)"close")
       ("Q" (kill-this-buffer)"kill")
       ("c" (lambda ()
	      (interactive)
	      (delete-window)
	      (kill-this-buffer))"c & k")
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-switch-window (:timeout 4)
       "switch window"
       ("j" (other-window 1)"next")
       ("k" (other-window -1)"previous")
       ("n" (lambda ()
	      (interactive)
	      (split-window-right)
	      (windmove-right))"v. split")
       ("N" (lambda ()
	      (interactive)
	      (split-window-below)
	      (windmove-down)) "h. split")
       ("q" (delete-window)"close")
       ("Q" (kill-this-buffer)"kill")
       ("c" (lambda ()
	      (interactive)
	      (delete-window)
	      (kill-this-buffer))"c & k")
       ("<escape>" nil "exit" :exit t))

     (defhydra hydra-eval-emacs (:timeout 4)
       ("i" (load-file user-init-file)"init.el" :exit t)
       ("<escape>" nil "exit" :exit t))

     (defun mf/switch-to-scratch ()
       (interactive)
       (switch-to-buffer "*scratch*"))

     (defun mf/switch-to-messages ()
       (interactive)
       (switch-to-buffer "*Messages*"))

    #+end_src


* org.el

** Org Functions

   | Function                | Description                                                 |
   |-------------------------+-------------------------------------------------------------|
   | mf/org-mode-set         | Diminish indent mode, visual line mode and evil auto indent |
   | mf/org-mode-visual-fill | Org mode column padding settings                            |

   #+begin_src emacs-lisp :tangle ./mf-org.el
					     ;-------   Org Function   -------\

     (defun mf/org-mode-setup ()
       (diminish 'org-indent-mode)
       ;;  (variable-pitch-mode 1)
       (visual-line-mode 1)
       (diminish 'visual-line-mode)
       (setq evil-auto-indent nil
	     org-adapt-indentation t))

     (defun mf/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

   #+end_src


** Org Packages

   #+begin_src emacs-lisp :tangle ./mf-org.el
					     ;-------   Packages   -------\

     (use-package org
       :pin org
       :custom (org-directory "~/Org")
       :commands (org-capture org-agenda)
       :hook (org-mode . mf/org-mode-setup)
       :config (setq org-startup-folded t
		     ;;org-ellipsis " ▾"
		     org-log-agenda-sater-with-log-mode t
		     org-log-done 'time
		     org-log-into-drawer t))

     (setq org-todo-keywords
	   '((type "TODO(t)" "HOLD(h)" "NEXT(n)" "|" "DONE(d!)")))

     (setq org-refile-targets
	   '(("Archive.org" :maxlevel . 1)
	     ("Tasks.org" :maxlevel . 1)))

     ;; Save Org buffers after refiling!
     (advice-add 'org-refile :after 'org-save-all-org-buffers)

     (use-package org-bullets
       :hook (org-mode . org-bullets-mode))

     (use-package visual-fill-column
       :hook (org-mode . mf/org-mode-visual-fill)
       :init
       (setq visual-fill-column-width 100)
       (setq visual-fill-column-center-text t)
       :config (global-visual-fill-column-mode t))

     (use-package org-roam
       :custom
       (org-roam-directory "~/Org/Roam")
       (org-roam-completion-everywhere t)
       (org-roam-capture-templates
	'(("p" "plain" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)
	  ("d" "Definition" plain
	   "\n* Definition\n\n  - %?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :empty-lines 1
	   :unnarrowed t)
	  ("D" "Symbols Definition" plain
	   "#+options: ^:{}\n#+startup: entitiespretty\n* nDefinition\n\n  - %?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)
	  ("l" "Logic" plain
	   "#+options: ^:{}\n#+startup: entitiespretty\n\n- A %?\n\n- B "
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)))

       :bind (("C-c n l" . org-roam-buffer-toggle)
	      ("C-c n f" . org-roam-node-find)
	      ("C-c n i" . org-roam-node-insert)
	      :map org-mode-map
	      ("M-TAB"    . completion-at-point))
	     :config
	     (org-roam-setup))

     (use-package org-roam-ui
       :after org-roam
       ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
       ;;         a hookable mode anymore, you're advised to pick something yourself
       ;;         if you don't care about startup time, use
       ;;  :hook (after-init . org-roam-ui-mode)
       :init
       (setq org-roam-ui-sync-theme t
	     org-roam-ui-follow t
	     org-roam-ui-open-on-start nil
	     org-roam-ui-update-on-save t
	     org-roam-ui-open-on-start t))

     (with-eval-after-load 'org
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((emacs-lisp . t)
	  (C . t))))

   #+end_src


** Org Agenda

   #+begin_src emacs-lisp :tangle ./mf-org.el
					     ;-------   Agenda   -------\

     (setq org-agenda-files
	   '("~/Documents/Org/todo.org"
	     "~/Documents/Org/to_get.org"))


     (setq org-agenda-custom-commands
	   '(("o" "Overview"
	      ((agenda "" ((org-deadline-warning-days 7)))
	       (todo "NEXT"
		     ((org-agenda-overriding-header "Next Tasks")))
	       (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

	     ("n" "Next Tasks"
	      ((todo "NEXT"
		     ((org-agenda-overriding-header "Next Tasks")))))


	     ("d" "Computer" tags-todo "computer")

	     ("l" "Learn" tags-todo "learn")

	     ("r" "Write" tags-todo "write")

	     ("w" "Elec Eng" tags-todo "ee")

	     ("p" "Music Production" tags-todo "music")

	     ("W" "Workflow"
	      ((todo "PLAN"
		     ((org-agenda-overriding-header "Plan")
		      (org-agenda-FILES ORG-AGENDA-files)))
	       (todo "DESIGN"
		     ((org-agenda-overriding-header "Design")
		      (org-agenda-files org-agenda-files)))
	       (todo "MAKE"
		     ((org-agenda-overriding-header "Make")
		      (org-agenda-files org-agenda-files)))))))

     (setq org-tag-alist
	   '((:startgroup)
	     ;; Put mutually exclusive tags here
	     (:endgroup)
	     ("computer" . ?d)
	     ("learn" . ?l)
	     ("write" . ?r)
	     ("make" . ?f)
	     ("ee" . ?w)
	     ("music" . ?p)
	     ("idea" . ?i)))

   #+end_src


** Org Keys

   #+begin_src emacs-lisp :tangle ./mf-org.el
					     ;-------   Org Keys   -------\

     ;;(define-key global-map "\C-cl" 'org-store-link)
     (define-key global-map "\C-ca" 'org-agenda)
     (define-key global-map "\C-cc" 'org-capture)
     ;;(define-key global-map (kbd "C-c c")
     ;;    (lambda () (interactive) (org-capture nil "jj")))
   #+end_src


* gui.el

** GUI

   - Remove all visual bloat

   - Flash Mode-Line instead of ring bell

   - Set Vim layer indicator faces

   - [ ] * Full-screen in daemon mode*


    #+begin_src emacs-lisp :tangle ./mf-gui.el
					      ;-------   General   -------\

      (scroll-bar-mode -1)
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (global-set-key (kbd "<f5>") 'menu-bar-mode)
      (set-fringe-mode 10)                    ; padding
      (tooltip-mode -1)
      (column-number-mode t)
      (global-display-line-numbers-mode t)
      (setq display-line-numbers-type 'relative)
      (setq display-line-numbers-width 3)

      (dolist (mode '(org-mode-hook
		      Info-mode-hook
		      term-mode-hook
		      shell-mode-hook
		      eshell-mode-hook
		      vterm-mode-hook
		      pdf-view-mode-hook))
	(add-hook mode (lambda () (display-line-numbers-mode 0))))

    #+end_src


** Theme

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Theme   -------\

     (setq custom-theme-directory (concat user-emacs-directory "themes"))

     (when (or (display-graphic-p)(daemonp))
       (load-theme 'mf-spacegrey t))

   #+end_src


** Modeline

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Modeline   -------\\

     (if (display-graphic-p)
	 (use-package mlscroll
	   :config (mlscroll-mode 1)))

     (if (daemonp)
	 (use-package mlscroll
	   :hook (server-after-make-frame . mlscroll-mode)))

     (setq evil-normal-state-tag
	   (propertize " <N> " 'face '((:background "DarkGoldenrod2" :foreground "black")))
	   evil-emacs-state-tag
	   (propertize " <E> " 'face '((:background "SkyBlue2"       :foreground "black")))
	   evil-insert-state-tag
	   (propertize " <I> " 'face '((:background "chartreuse3"    :foreground "black")))
	   evil-replace-state-tag
	   (propertize " <R> " 'face '((:background "chocolate"      :foreground "black")))
	   evil-motion-state-tag
	   (propertize " <M> " 'face '((:background "plum3"          :foreground "black")))
	   evil-visual-state-tag
	   (propertize " <V> " 'face '((:background "gray"           :foreground "black")))
	   evil-operator-state-tag
	   (propertize " <O> " 'face '((:background "sandy brown"    :foreground "black"))))

     (setq ring-bell-function
	   (lambda ()
	     (let ((orig-fg (face-foreground 'mode-line)))
	       (set-face-foreground 'mode-line "#000")
	       ;; (set-face-foreground 'mode-line "#fd5300")
	       (run-with-idle-timer 0.1 nil
				    (lambda (fg) (set-face-foreground 'mode-line fg))
				    orig-fg))))

   #+end_src


** Gui Packages

   | Package            | Description                              |
   |--------------------+------------------------------------------|
   | Diminish           | Hide selected modes from modeline        |
   | Rainbow-Delimiters | Color parethesies                        |
   | mlscroll           | Document location indicator for modeline |

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   GUI Packages   -------\

     (use-package diminish)
     (eval-after-load "eldoc"
       '(diminish 'eldoc-mode))

     (diminish 'abbrev-mode)

     (use-package rainbow-mode
       :defer t
       :diminish)

     (use-package rainbow-delimiters
       :diminish
       :hook (prog-mode . rainbow-delimiters-mode))

     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho --group-directories-first")))

     (autoload 'dired-omit-mode "dired-x")

     (use-package perspective
       :defer t
       :custom
       (persp-mode-prefix-key (kbd "C-x x"))
       :bind (("C-x k" . persp-kill-buffer*))
       :init
       (persp-mode))

     (use-package dired-single
       :commands (dired dired-jump))

     (use-package dired-ranger
       :defer t)

     (use-package dired-collapse
       :defer t)

     (use-package emojify
       :hook (erc-mode . emojify-mode)
       :commands emojify-mode)

   #+end_src


** Fonts

   #+begin_src emacs-lisp :tangle ./mf-gui.el
					     ;-------   Fonts    -------\

     ;; (set-face-attribute 'default nil :font "FONT NAME" :height ##)

   #+end_src


* templates.el

  #+begin_src emacs-lisp :tangle ./mf-templates.el
						;-------   Tempo Templates   -------\

    (with-eval-after-load 'org
      ;; This is needed as of Org 9.2
      (require 'org-tempo)

      (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("eli" . "src emacs-lisp :tangle ./init.el"))
      (add-to-list 'org-structure-template-alist '("elg" . "src emacs-lisp :tangle ./mf-gui.el"))
      (add-to-list 'org-structure-template-alist '("elk" . "src emacs-lisp :tangle ./mf-keys.el"))
      (add-to-list 'org-structure-template-alist '("elo" . "src emacs-lisp :tangle ./mf-org.el"))
      (add-to-list 'org-structure-template-alist '("elt" . "src emacs-lisp :tangle ./mf-templates.el"))
      (add-to-list 'org-structure-template-alist '("els" . "src emacs-lisp :tangle ./mf-sh.el"))
      (add-to-list 'org-structure-template-alist '("cc" . "src C :exports results"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("b" . "src bash :tangle ./ais_tangled.sh"))
      (tempo-define-template "org-recipe"
			     '( "** "p n n
				"*** Meta:" n n
				"   Dificulty    : " n
				"   Time         : " n
				"   Time Cooking : " n
				"   Servings     : " n
				"   Equipment    : "n n
				"*** Ingredients:"n n
				"    | Ingredient | Amount |" n
				"    |------------+--------|" n
				"    |            |        |" n
				"    |            |        |" n
				"    |            |        |"n n
				"*** Instrucions:"n n
				"    1. "n n
				"*** Notes:"n n
				"    - " n
				)
			     "<r" "Insert org-recipe" 'org-tempo-tags))


					    ;-------   Org Capture Templates   -------\


    (setq org-capture-templates
	  `(("t" "Tasks / Projects")
	    ("tt" "Task" entry (file+olp "/Org/todo.org" "Captured")
	     "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

	    ("j" "Journal Entries")
	    ("jj" "Journal" entry
	     (file+olp+datetree "~/Org/journal.org")
	     "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
	     ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
	     :clock-in :clock-resume
	     :empty-lines 1)))
	    ;; ("jm" "Meeting" entry
	    ;;  (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	    ;;  "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
	    ;;  :clock-in :clock-resume
	    ;;  :empty-lines 1)))

	    ;; ("w" "Workflows")
	    ;; ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
	    ;;  "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

	    ;; ("m" "Metrics Capture")
	    ;; ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
	    ;;  "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

 #+end_src


* sh.el

  | Function                  | Description                                  |
  |---------------------------+----------------------------------------------|
  | mf/org-babel-tangle-conig | Aftersave hook to babel tangle to init files |
  | mf/xrdb-xresources        | Aftersave hook to reinit .Xresources         |
  | mf/org-dropbox            | Run dropbox when any ~/Dropbox file is open  |

  - reset gc-cons-threshold to a reasonabe value
  #+begin_src emacs-lisp :tangle ./mf-sh.el
					    ;-------   Save Hooks   -------\

    (defun mf/org-babel-tangle-config ()
      (when (string-equal (file-name-directory (buffer-file-name))
			  (expand-file-name user-emacs-directory))
	(let ((org-confirm-babel-evaluate nil))
	  (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mf/org-babel-tangle-config)))


    (defun mf/xrdb-xresources ()
      (when (string-equal (buffer-file-name)
			  (expand-file-name "~/.dotfiles/.Xresources"))
	(and (shell-command "xrdb ~/.Xresources")
	     (message "xrdb updated"))))

    (add-hook 'conf-mode-hook (lambda () (add-hook 'after-save-hook #'mf/xrdb-xresources)))

    ;; (defun mf/dropbox ()
    ;;   (while (string-equal (file-name-directory)
    ;;		       (expand-file-name "~/Dropbox"))
    ;;     (shell-command "dropbox")))

    ;; (lambda () (add-hook 'after-save-hook #'mf/dropbox)

	 (setq gc-cons-threshold (* 2 1000 1000))
  #+end_src


* Plans
** Feature/Behavior
*** terminal version
    - tangle to one file for a single when check?
    - even lighter
*** Undo
    - undo-fu
    - vundo
    - undo-tree
*** Variable theme path for hydra
*** Windows and Buffers
**** Pin buffer in window
**** Key Driven Choose Buffer Screen
     - Screen accessible through key bind
       - Displays open buffers tiled
       - Key strokes to select buffer overlaid on buffer tile
**** Better window management
***** Window layout for ide
***** Work-Spaces
      - Eyebrowse
      - Perspective
      - beframe

**** Visually indicate selected buffer in minibuffer mode
**** Truncate File Name in Mode-Line
     - Auto remove org roam file id
     - truncate any name when mode line is small
*** Deal with Auto-Save files
*** Different auto indent behavior
*** Marginalia/mini-buffer no text wrapping
*** LSP/eglot
**** Function info in minibuffer control
     pinned to static buffer?
**** elsip
**** Different completion delay for modes
***** Writing slow delay
***** Coding fast delay
*** Flyspell ignore
**** Custom dictionary
*** Custom Random Scratch Message
*** straight.el?
*** Gantt Charts
*** Org
**** Capture
***** Debugging with file pointer
***** Notes
***** Todos
***** Journal?
**** Agenda
***** Plan(ner)
***** dots
***** poporg
**** Rabbit
***** water plants
***** bills
**** Ellipses
**** Task Options?
**** Autex
**** Orgzly?
**** GTG David Allen
**** bibtex roam
**** Org LaTeX bibliography
**** Org Mode Extensions
***** Org Mode Literate Code Line Numbers
      the tangled line numbers are displayed in the org mode code blocks
***** Manipulating the Header In/Exclude Code-Block From Tangle

*** Mode-line
**** Customize
**** Doom inspiration
**** Telephone Line
*** Modes
**** Tramp
**** Calc Mode
**** irc config
*** Native Comp
**** Optimize
*** Minad Packages
**** Corfu
***** vs company?
**** Cape
**** Embark
     - actions for current selections
       - rename etc
**** Selectum
     - alternative
*** Hooks
**** Dropbox Alternative Hook
     - Hook to run dropbox or alternative while and for a minute after in buffers from dropbox dir.
     - Remote File Backup and Source?
**** Compile suckless?
**** Tangle AIS
*** Arduino IDE
*** Browser Bookmarks
*** light mode toggle
*** auth source?
    alt that works with other programs
*** Pomodoro
*** TreeMacs
*** Make Dired Like ranger?
*** lexical-binding
*** Email
**** Worth it?
*** Unbind all keys?
    - look into a toggle-able sparse custom key map
      - no mistakes
      - less functionality
	- if i need a function bound i should bind it myself
      - Toggle-able so I still have access to the bloat
** Logical Organization
*** Determine Load Priority and Prerequisites
*** Separate Files?
** Theme
*** Use systemcrafter suggested theme as base.
*** Fonts
**** New
**** Like brin?
*** Propperly fork theme
*** inspo
**** subline spacegray
**** doom-horizon
** Bugs
*** Dir Local Vars load after org mode
**** all #+STARTUP: options don't work with .dir-locals.el

*** Org Roam Capture swallowing new lines
    fixed in native comp
    
